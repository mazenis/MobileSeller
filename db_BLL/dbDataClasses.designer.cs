#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace db_BLL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MobileSales")]
	public partial class dbDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAction_Log(Action_Log instance);
    partial void UpdateAction_Log(Action_Log instance);
    partial void DeleteAction_Log(Action_Log instance);
    partial void InsertUsers_Type(Users_Type instance);
    partial void UpdateUsers_Type(Users_Type instance);
    partial void DeleteUsers_Type(Users_Type instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertControl_Section(Control_Section instance);
    partial void UpdateControl_Section(Control_Section instance);
    partial void DeleteControl_Section(Control_Section instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomers_Bill(Customers_Bill instance);
    partial void UpdateCustomers_Bill(Customers_Bill instance);
    partial void DeleteCustomers_Bill(Customers_Bill instance);
    partial void InsertCustomers_Bills_Detail(Customers_Bills_Detail instance);
    partial void UpdateCustomers_Bills_Detail(Customers_Bills_Detail instance);
    partial void DeleteCustomers_Bills_Detail(Customers_Bills_Detail instance);
    partial void InsertCustomers_Group(Customers_Group instance);
    partial void UpdateCustomers_Group(Customers_Group instance);
    partial void DeleteCustomers_Group(Customers_Group instance);
    partial void InsertCustomers_Group1(Customers_Group1 instance);
    partial void UpdateCustomers_Group1(Customers_Group1 instance);
    partial void DeleteCustomers_Group1(Customers_Group1 instance);
    partial void InsertCustomers_Location(Customers_Location instance);
    partial void UpdateCustomers_Location(Customers_Location instance);
    partial void DeleteCustomers_Location(Customers_Location instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertItem_Property(Item_Property instance);
    partial void UpdateItem_Property(Item_Property instance);
    partial void DeleteItem_Property(Item_Property instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItems_Property(Items_Property instance);
    partial void UpdateItems_Property(Items_Property instance);
    partial void DeleteItems_Property(Items_Property instance);
    partial void InsertItems_Provider(Items_Provider instance);
    partial void UpdateItems_Provider(Items_Provider instance);
    partial void DeleteItems_Provider(Items_Provider instance);
    partial void InsertMax_Balance_Limitation(Max_Balance_Limitation instance);
    partial void UpdateMax_Balance_Limitation(Max_Balance_Limitation instance);
    partial void DeleteMax_Balance_Limitation(Max_Balance_Limitation instance);
    partial void InsertNavigation_Customer(Navigation_Customer instance);
    partial void UpdateNavigation_Customer(Navigation_Customer instance);
    partial void DeleteNavigation_Customer(Navigation_Customer instance);
    partial void InsertNavigation_Type(Navigation_Type instance);
    partial void UpdateNavigation_Type(Navigation_Type instance);
    partial void DeleteNavigation_Type(Navigation_Type instance);
    partial void InsertNavigations_Route(Navigations_Route instance);
    partial void UpdateNavigations_Route(Navigations_Route instance);
    partial void DeleteNavigations_Route(Navigations_Route instance);
    partial void InsertPayment_Currency(Payment_Currency instance);
    partial void UpdatePayment_Currency(Payment_Currency instance);
    partial void DeletePayment_Currency(Payment_Currency instance);
    partial void InsertPayments_Detail(Payments_Detail instance);
    partial void UpdatePayments_Detail(Payments_Detail instance);
    partial void DeletePayments_Detail(Payments_Detail instance);
    partial void InsertPayments_Type(Payments_Type instance);
    partial void UpdatePayments_Type(Payments_Type instance);
    partial void DeletePayments_Type(Payments_Type instance);
    partial void InsertPromotion(Promotion instance);
    partial void UpdatePromotion(Promotion instance);
    partial void DeletePromotion(Promotion instance);
    partial void InsertProvider(Provider instance);
    partial void UpdateProvider(Provider instance);
    partial void DeleteProvider(Provider instance);
    partial void InsertSalesman_Store(Salesman_Store instance);
    partial void UpdateSalesman_Store(Salesman_Store instance);
    partial void DeleteSalesman_Store(Salesman_Store instance);
    partial void InsertSalesman_Visit(Salesman_Visit instance);
    partial void UpdateSalesman_Visit(Salesman_Visit instance);
    partial void DeleteSalesman_Visit(Salesman_Visit instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertStores_Item(Stores_Item instance);
    partial void UpdateStores_Item(Stores_Item instance);
    partial void DeleteStores_Item(Stores_Item instance);
    partial void InsertSuggested_Client(Suggested_Client instance);
    partial void UpdateSuggested_Client(Suggested_Client instance);
    partial void DeleteSuggested_Client(Suggested_Client instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsers_Car(Users_Car instance);
    partial void UpdateUsers_Car(Users_Car instance);
    partial void DeleteUsers_Car(Users_Car instance);
    partial void InsertUsers_Days_Off(Users_Days_Off instance);
    partial void UpdateUsers_Days_Off(Users_Days_Off instance);
    partial void DeleteUsers_Days_Off(Users_Days_Off instance);
    partial void InsertUsers_Payment(Users_Payment instance);
    partial void UpdateUsers_Payment(Users_Payment instance);
    partial void DeleteUsers_Payment(Users_Payment instance);
    partial void InsertUsers_Permission(Users_Permission instance);
    partial void UpdateUsers_Permission(Users_Permission instance);
    partial void DeleteUsers_Permission(Users_Permission instance);
    #endregion
		
		public dbDataClassesDataContext() : 
				base(global::db_BLL.Properties.Settings.Default.MobileSalesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Action_Log> Action_Logs
		{
			get
			{
				return this.GetTable<Action_Log>();
			}
		}
		
		public System.Data.Linq.Table<Users_Type> Users_Types
		{
			get
			{
				return this.GetTable<Users_Type>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Control_Section> Control_Sections
		{
			get
			{
				return this.GetTable<Control_Section>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Customers_Bill> Customers_Bills
		{
			get
			{
				return this.GetTable<Customers_Bill>();
			}
		}
		
		public System.Data.Linq.Table<Customers_Bills_Detail> Customers_Bills_Details
		{
			get
			{
				return this.GetTable<Customers_Bills_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Customers_Group> Customers_Groups
		{
			get
			{
				return this.GetTable<Customers_Group>();
			}
		}
		
		public System.Data.Linq.Table<Customers_Group1> Customers_Group1s
		{
			get
			{
				return this.GetTable<Customers_Group1>();
			}
		}
		
		public System.Data.Linq.Table<Customers_Location> Customers_Locations
		{
			get
			{
				return this.GetTable<Customers_Location>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<Item_Property> Item_Properties
		{
			get
			{
				return this.GetTable<Item_Property>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Items_Property> Items_Properties
		{
			get
			{
				return this.GetTable<Items_Property>();
			}
		}
		
		public System.Data.Linq.Table<Items_Provider> Items_Providers
		{
			get
			{
				return this.GetTable<Items_Provider>();
			}
		}
		
		public System.Data.Linq.Table<Max_Balance_Limitation> Max_Balance_Limitations
		{
			get
			{
				return this.GetTable<Max_Balance_Limitation>();
			}
		}
		
		public System.Data.Linq.Table<Navigation_Customer> Navigation_Customers
		{
			get
			{
				return this.GetTable<Navigation_Customer>();
			}
		}
		
		public System.Data.Linq.Table<Navigation_Type> Navigation_Types
		{
			get
			{
				return this.GetTable<Navigation_Type>();
			}
		}
		
		public System.Data.Linq.Table<Navigations_Route> Navigations_Routes
		{
			get
			{
				return this.GetTable<Navigations_Route>();
			}
		}
		
		public System.Data.Linq.Table<Payment_Currency> Payment_Currencies
		{
			get
			{
				return this.GetTable<Payment_Currency>();
			}
		}
		
		public System.Data.Linq.Table<Payments_Detail> Payments_Details
		{
			get
			{
				return this.GetTable<Payments_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Payments_Type> Payments_Types
		{
			get
			{
				return this.GetTable<Payments_Type>();
			}
		}
		
		public System.Data.Linq.Table<Promotion> Promotions
		{
			get
			{
				return this.GetTable<Promotion>();
			}
		}
		
		public System.Data.Linq.Table<Provider> Providers
		{
			get
			{
				return this.GetTable<Provider>();
			}
		}
		
		public System.Data.Linq.Table<Salesman_Store> Salesman_Stores
		{
			get
			{
				return this.GetTable<Salesman_Store>();
			}
		}
		
		public System.Data.Linq.Table<Salesman_Visit> Salesman_Visits
		{
			get
			{
				return this.GetTable<Salesman_Visit>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<Stores_Item> Stores_Items
		{
			get
			{
				return this.GetTable<Stores_Item>();
			}
		}
		
		public System.Data.Linq.Table<Suggested_Client> Suggested_Clients
		{
			get
			{
				return this.GetTable<Suggested_Client>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Users_Car> Users_Cars
		{
			get
			{
				return this.GetTable<Users_Car>();
			}
		}
		
		public System.Data.Linq.Table<Users_Days_Off> Users_Days_Offs
		{
			get
			{
				return this.GetTable<Users_Days_Off>();
			}
		}
		
		public System.Data.Linq.Table<Users_Payment> Users_Payments
		{
			get
			{
				return this.GetTable<Users_Payment>();
			}
		}
		
		public System.Data.Linq.Table<Users_Permission> Users_Permissions
		{
			get
			{
				return this.GetTable<Users_Permission>();
			}
		}
		
		[Function(Name="dbo.Action_Log_Delete")]
		public int Action_Log_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Update")]
		public int Users_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_Type_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_Type_ID, [Parameter(Name="Department_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> department_ID, [Parameter(Name="User_Title", DbType="NVarChar(MAX)")] string user_Title, [Parameter(Name="FirstName", DbType="NVarChar(MAX)")] string firstName, [Parameter(Name="LastName", DbType="NVarChar(MAX)")] string lastName, [Parameter(Name="Position", DbType="NVarChar(MAX)")] string position, [Parameter(Name="Organization", DbType="NVarChar(MAX)")] string organization, [Parameter(Name="Join_Date", DbType="DateTime")] System.Nullable<System.DateTime> join_Date, [Parameter(DbType="NVarChar(MAX)")] string username, [Parameter(DbType="NVarChar(MAX)")] string password, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_User_ID, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_Type_ID, department_ID, user_Title, firstName, lastName, position, organization, join_Date, username, password, entry_Date, unique_User_ID, iS_ACTIVE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Action_Log_Insert")]
		public int Action_Log_Insert([Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Section_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> section_ID, [Parameter(Name="IS_Mobile", DbType="Bit")] System.Nullable<bool> iS_Mobile, [Parameter(Name="Related_Object_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> related_Object_ID, [Parameter(Name="Operation", DbType="NVarChar(MAX)")] string operation, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_ID, section_ID, iS_Mobile, related_Object_ID, operation, entry_Date, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Action_Log_Update")]
		public int Action_Log_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Section_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> section_ID, [Parameter(Name="IS_Mobile", DbType="Bit")] System.Nullable<bool> iS_Mobile, [Parameter(Name="Related_Object_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> related_Object_ID, [Parameter(Name="Operation", DbType="NVarChar(MAX)")] string operation, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_ID, section_ID, iS_Mobile, related_Object_ID, operation, entry_Date, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Area_Delete")]
		public int Area_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Area_Insert")]
		public int Area_Insert([Parameter(Name="Area_Title", DbType="NVarChar(MAX)")] string area_Title, [Parameter(Name="X_LOC", DbType="NVarChar(MAX)")] string x_LOC, [Parameter(Name="Y_LOC", DbType="NVarChar(MAX)")] string y_LOC, [Parameter(Name="Map_URL", DbType="NVarChar(MAX)")] string map_URL, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), area_Title, x_LOC, y_LOC, map_URL, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Area_Update")]
		public int Area_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Area_Title", DbType="NVarChar(MAX)")] string area_Title, [Parameter(Name="X_LOC", DbType="NVarChar(MAX)")] string x_LOC, [Parameter(Name="Y_LOC", DbType="NVarChar(MAX)")] string y_LOC, [Parameter(Name="Map_URL", DbType="NVarChar(MAX)")] string map_URL, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, area_Title, x_LOC, y_LOC, map_URL, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Category_Delete")]
		public int Category_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Category_Insert")]
		public int Category_Insert([Parameter(Name="Category_Name", DbType="NVarChar(MAX)")] string category_Name, [Parameter(Name="Notes", DbType="NVarChar(MAX)")] string notes, [Parameter(Name="Parent_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> parent_ID, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(DbType="Int")] System.Nullable<int> level_depth)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), category_Name, notes, parent_ID, iS_ACTIVE, level_depth);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Category_Update")]
		public int Category_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Category_Name", DbType="NVarChar(MAX)")] string category_Name, [Parameter(Name="Notes", DbType="NVarChar(MAX)")] string notes, [Parameter(Name="Parent_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> parent_ID, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(DbType="Int")] System.Nullable<int> level_depth)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, category_Name, notes, parent_ID, iS_ACTIVE, level_depth);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Control_Sections_Delete")]
		public int Control_Sections_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Control_Sections_Insert")]
		public int Control_Sections_Insert([Parameter(Name="Section_name", DbType="NVarChar(MAX)")] string section_name, [Parameter(Name="IS_MOBILE", DbType="Bit")] System.Nullable<bool> iS_MOBILE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), section_name, iS_MOBILE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Control_Sections_Update")]
		public int Control_Sections_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Section_name", DbType="NVarChar(MAX)")] string section_name, [Parameter(Name="IS_MOBILE", DbType="Bit")] System.Nullable<bool> iS_MOBILE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, section_name, iS_MOBILE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Bills_Delete")]
		public int Customers_Bills_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Bills_Details_Delete")]
		public int Customers_Bills_Details_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Bills_Details_Insert")]
		public int Customers_Bills_Details_Insert([Parameter(Name="Bill_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> bill_ID, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bill_ID, item_ID, quantity, price, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Bills_Details_Update")]
		public int Customers_Bills_Details_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Bill_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> bill_ID, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, bill_ID, item_ID, quantity, price, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Bills_Insert")]
		public int Customers_Bills_Insert([Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Bill_Date", DbType="DateTime")] System.Nullable<System.DateTime> bill_Date, [Parameter(Name="IS_PAID", DbType="Bit")] System.Nullable<bool> iS_PAID, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE, [Parameter(Name="IS_DELIVERED", DbType="Bit")] System.Nullable<bool> iS_DELIVERED, [Parameter(Name="IS_CANCELED", DbType="Bit")] System.Nullable<bool> iS_CANCELED, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Bill_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Bill_ID, [Parameter(Name="Bill_Status", DbType="Int")] System.Nullable<int> bill_Status, [Parameter(Name="Bill_Type", DbType="Int")] System.Nullable<int> bill_Type, [Parameter(Name="IS_ORDER", DbType="Bit")] System.Nullable<bool> iS_ORDER)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer_ID, user_ID, bill_Date, iS_PAID, iS_ACKNOWLEDGE, iS_DELIVERED, iS_CANCELED, note, entry_Date, unique_Bill_ID, bill_Status, bill_Type, iS_ORDER);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Bills_Update")]
		public int Customers_Bills_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Bill_Date", DbType="DateTime")] System.Nullable<System.DateTime> bill_Date, [Parameter(Name="IS_PAID", DbType="Bit")] System.Nullable<bool> iS_PAID, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE, [Parameter(Name="IS_DELIVERED", DbType="Bit")] System.Nullable<bool> iS_DELIVERED, [Parameter(Name="IS_CANCELED", DbType="Bit")] System.Nullable<bool> iS_CANCELED, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Bill_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Bill_ID, [Parameter(Name="Bill_Status", DbType="Int")] System.Nullable<int> bill_Status, [Parameter(Name="Bill_Type", DbType="Int")] System.Nullable<int> bill_Type, [Parameter(Name="IS_ORDER", DbType="Bit")] System.Nullable<bool> iS_ORDER)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customer_ID, user_ID, bill_Date, iS_PAID, iS_ACKNOWLEDGE, iS_DELIVERED, iS_CANCELED, note, entry_Date, unique_Bill_ID, bill_Status, bill_Type, iS_ORDER);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Delete")]
		public int Customers_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Group_Delete")]
		public int Customers_Group_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Group_Insert")]
		public int Customers_Group_Insert([Parameter(Name="Group_Name", DbType="NVarChar(MAX)")] string group_Name, [Parameter(DbType="Decimal")] System.Nullable<decimal> max_balance_limit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), group_Name, max_balance_limit);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Group_Update")]
		public int Customers_Group_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Group_Name", DbType="NVarChar(MAX)")] string group_Name, [Parameter(DbType="Decimal")] System.Nullable<decimal> max_balance_limit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, group_Name, max_balance_limit);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Groups_Delete")]
		public int Customers_Groups_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Groups_Insert")]
		public int Customers_Groups_Insert([Parameter(Name="Customer_Group_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_Group_ID, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer_Group_ID, customer_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Groups_Update")]
		public int Customers_Groups_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Customer_Group_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_Group_ID, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customer_Group_ID, customer_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Insert")]
		public int Customers_Insert([Parameter(Name="Customer_Title", DbType="NVarChar(MAX)")] string customer_Title, [Parameter(Name="Fullname", DbType="NVarChar(MAX)")] string fullname, [Parameter(Name="Address", DbType="NVarChar(MAX)")] string address, [Parameter(Name="Phone", DbType="NVarChar(MAX)")] string phone, [Parameter(Name="Mobile", DbType="NVarChar(MAX)")] string mobile, [Parameter(Name="Date_Added", DbType="DateTime")] System.Nullable<System.DateTime> date_Added, [Parameter(Name="Can_Sale", DbType="Bit")] System.Nullable<bool> can_Sale, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(Name="IS_DELETED", DbType="Bit")] System.Nullable<bool> iS_DELETED, [Parameter(Name="LOCATION_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> lOCATION_ID, [Parameter(Name="Related_User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> related_User_ID, [Parameter(Name="Send_Balance_Newsletter", DbType="Bit")] System.Nullable<bool> send_Balance_Newsletter, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Customer_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer_Title, fullname, address, phone, mobile, date_Added, can_Sale, iS_ACTIVE, iS_DELETED, lOCATION_ID, related_User_ID, send_Balance_Newsletter, entry_Date, unique_Customer_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Locations_Delete")]
		public int Customers_Locations_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Locations_Insert")]
		public int Customers_Locations_Insert([Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Area_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> area_ID, [Parameter(Name="Location_Title", DbType="NVarChar(MAX)")] string location_Title, [Parameter(Name="X_LOC", DbType="NVarChar(MAX)")] string x_LOC, [Parameter(Name="Y_LOC", DbType="NVarChar(MAX)")] string y_LOC, [Parameter(Name="Map_URL", DbType="NVarChar(MAX)")] string map_URL, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer_ID, area_ID, location_Title, x_LOC, y_LOC, map_URL, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Locations_Update")]
		public int Customers_Locations_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Area_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> area_ID, [Parameter(Name="Location_Title", DbType="NVarChar(MAX)")] string location_Title, [Parameter(Name="X_LOC", DbType="NVarChar(MAX)")] string x_LOC, [Parameter(Name="Y_LOC", DbType="NVarChar(MAX)")] string y_LOC, [Parameter(Name="Map_URL", DbType="NVarChar(MAX)")] string map_URL, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customer_ID, area_ID, location_Title, x_LOC, y_LOC, map_URL, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Customers_Update")]
		public int Customers_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Customer_Title", DbType="NVarChar(MAX)")] string customer_Title, [Parameter(Name="Fullname", DbType="NVarChar(MAX)")] string fullname, [Parameter(Name="Address", DbType="NVarChar(MAX)")] string address, [Parameter(Name="Phone", DbType="NVarChar(MAX)")] string phone, [Parameter(Name="Mobile", DbType="NVarChar(MAX)")] string mobile, [Parameter(Name="Date_Added", DbType="DateTime")] System.Nullable<System.DateTime> date_Added, [Parameter(Name="Can_Sale", DbType="Bit")] System.Nullable<bool> can_Sale, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(Name="IS_DELETED", DbType="Bit")] System.Nullable<bool> iS_DELETED, [Parameter(Name="LOCATION_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> lOCATION_ID, [Parameter(Name="Related_User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> related_User_ID, [Parameter(Name="Send_Balance_Newsletter", DbType="Bit")] System.Nullable<bool> send_Balance_Newsletter, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Customer_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customer_Title, fullname, address, phone, mobile, date_Added, can_Sale, iS_ACTIVE, iS_DELETED, lOCATION_ID, related_User_ID, send_Balance_Newsletter, entry_Date, unique_Customer_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Departments_Delete")]
		public int Departments_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Departments_Insert")]
		public int Departments_Insert([Parameter(Name="Department_Name", DbType="NVarChar(MAX)")] string department_Name, [Parameter(Name="Area_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> area_ID, [Parameter(Name="X_LOC", DbType="NVarChar(MAX)")] string x_LOC, [Parameter(Name="Y_LOC", DbType="NVarChar(MAX)")] string y_LOC, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), department_Name, area_ID, x_LOC, y_LOC, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Departments_Update")]
		public int Departments_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Department_Name", DbType="NVarChar(MAX)")] string department_Name, [Parameter(Name="Area_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> area_ID, [Parameter(Name="X_LOC", DbType="NVarChar(MAX)")] string x_LOC, [Parameter(Name="Y_LOC", DbType="NVarChar(MAX)")] string y_LOC, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, department_Name, area_ID, x_LOC, y_LOC, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Discounts_Delete")]
		public int Discounts_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Discounts_Insert")]
		public int Discounts_Insert([Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Discount_Percent", DbType="Int")] System.Nullable<int> discount_Percent, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Discount_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Discount_ID, [Parameter(Name="Customers_Group_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customers_Group_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), item_ID, discount_Percent, from_Date, to_Date, iS_ACTIVE, entry_Date, unique_Discount_ID, customers_Group_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Discounts_Update")]
		public int Discounts_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Discount_Percent", DbType="Int")] System.Nullable<int> discount_Percent, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Discount_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Discount_ID, [Parameter(Name="Customers_Group_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customers_Group_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, item_ID, discount_Percent, from_Date, to_Date, iS_ACTIVE, entry_Date, unique_Discount_ID, customers_Group_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Item_Properties_Delete")]
		public int Item_Properties_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Item_Properties_Insert")]
		public int Item_Properties_Insert([Parameter(Name="Item_Property", DbType="NVarChar(MAX)")] string item_Property)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), item_Property);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Item_Properties_Update")]
		public int Item_Properties_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Item_Property", DbType="NVarChar(MAX)")] string item_Property)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, item_Property);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Delete")]
		public int Items_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Insert")]
		public int Items_Insert([Parameter(Name="Provider_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> provider_ID, [Parameter(Name="Name", DbType="NVarChar(MAX)")] string name, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price, [Parameter(Name="IS_AVAILABLE", DbType="Bit")] System.Nullable<bool> iS_AVAILABLE, [Parameter(Name="IS_DELETED", DbType="Bit")] System.Nullable<bool> iS_DELETED)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), provider_ID, name, price, iS_AVAILABLE, iS_DELETED);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Properties_Delete")]
		public int Items_Properties_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Properties_Insert")]
		public int Items_Properties_Insert([Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Property_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> property_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), item_ID, property_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Properties_Update")]
		public int Items_Properties_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Property_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> property_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, item_ID, property_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Providers_Delete")]
		public int Items_Providers_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Providers_Insert")]
		public int Items_Providers_Insert([Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Providers_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> providers_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), item_ID, providers_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Providers_Update")]
		public int Items_Providers_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Providers_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> providers_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, item_ID, providers_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Items_Update")]
		public int Items_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Provider_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> provider_ID, [Parameter(Name="Name", DbType="NVarChar(MAX)")] string name, [Parameter(Name="Price", DbType="Decimal")] System.Nullable<decimal> price, [Parameter(Name="IS_AVAILABLE", DbType="Bit")] System.Nullable<bool> iS_AVAILABLE, [Parameter(Name="IS_DELETED", DbType="Bit")] System.Nullable<bool> iS_DELETED, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Item_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, provider_ID, name, price, iS_AVAILABLE, iS_DELETED, entry_Date, unique_Item_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Max_Balance_Limitation_Delete")]
		public int Max_Balance_Limitation_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Max_Balance_Limitation_Insert")]
		public int Max_Balance_Limitation_Insert([Parameter(Name="Max_Limit", DbType="Decimal")] System.Nullable<decimal> max_Limit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), max_Limit);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Max_Balance_Limitation_Update")]
		public int Max_Balance_Limitation_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Max_Limit", DbType="Decimal")] System.Nullable<decimal> max_Limit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, max_Limit);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigation_Customers_Delete")]
		public int Navigation_Customers_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigation_Customers_Insert")]
		public int Navigation_Customers_Insert([Parameter(Name="Navigation_Route_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> navigation_Route_ID, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), navigation_Route_ID, customer_ID, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigation_Customers_Update")]
		public int Navigation_Customers_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Navigation_Route_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> navigation_Route_ID, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, navigation_Route_ID, customer_ID, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigation_Types_Delete")]
		public int Navigation_Types_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigation_Types_Insert")]
		public int Navigation_Types_Insert([Parameter(Name="Navigation_Title", DbType="NVarChar(MAX)")] string navigation_Title, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), navigation_Title, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigation_Types_Update")]
		public int Navigation_Types_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Navigation_Title", DbType="NVarChar(MAX)")] string navigation_Title, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, navigation_Title, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigations_Routes_Delete")]
		public int Navigations_Routes_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigations_Routes_Insert")]
		public int Navigations_Routes_Insert([Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Navigation_Type_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> navigation_Type_ID, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_ID, navigation_Type_ID, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Navigations_Routes_Update")]
		public int Navigations_Routes_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Navigation_Type_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> navigation_Type_ID, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_ID, navigation_Type_ID, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payment_Currencies_Delete")]
		public int Payment_Currencies_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payment_Currencies_Insert")]
		public int Payment_Currencies_Insert([Parameter(Name="Payment_Currency", DbType="NVarChar(MAX)")] string payment_Currency, [Parameter(Name="PayExtension", DbType="NVarChar(MAX)")] string payExtension, [Parameter(Name="FlagImg", DbType="NVarChar(MAX)")] string flagImg)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), payment_Currency, payExtension, flagImg);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payment_Currencies_Update")]
		public int Payment_Currencies_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Payment_Currency", DbType="NVarChar(MAX)")] string payment_Currency, [Parameter(Name="PayExtension", DbType="NVarChar(MAX)")] string payExtension, [Parameter(Name="FlagImg", DbType="NVarChar(MAX)")] string flagImg)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, payment_Currency, payExtension, flagImg);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payments_Details_Delete")]
		public int Payments_Details_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payments_Details_Insert")]
		public int Payments_Details_Insert([Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Payment_type_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> payment_type_ID, [Parameter(Name="Payment_Currency_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> payment_Currency_ID, [Parameter(Name="Payment_Amount", DbType="Decimal")] System.Nullable<decimal> payment_Amount, [Parameter(Name="Payment_Date", DbType="DateTime")] System.Nullable<System.DateTime> payment_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer_ID, payment_type_ID, payment_Currency_ID, payment_Amount, payment_Date, entry_Date, note, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payments_Details_Update")]
		public int Payments_Details_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Payment_type_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> payment_type_ID, [Parameter(Name="Payment_Currency_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> payment_Currency_ID, [Parameter(Name="Payment_Amount", DbType="Decimal")] System.Nullable<decimal> payment_Amount, [Parameter(Name="Payment_Date", DbType="DateTime")] System.Nullable<System.DateTime> payment_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customer_ID, payment_type_ID, payment_Currency_ID, payment_Amount, payment_Date, entry_Date, note, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payments_Types_Delete")]
		public int Payments_Types_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payments_Types_Insert")]
		public int Payments_Types_Insert([Parameter(Name="Payment_type", DbType="NVarChar(MAX)")] string payment_type, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), payment_type, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Payments_Types_Update")]
		public int Payments_Types_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Payment_type", DbType="NVarChar(MAX)")] string payment_type, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, payment_type, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Promotions_Delete")]
		public int Promotions_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Promotions_Insert")]
		public int Promotions_Insert([Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Total_Price", DbType="Decimal")] System.Nullable<decimal> total_Price, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Promotion_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Promotion_ID, [Parameter(Name="Customers_Group_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customers_Group_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), item_ID, quantity, total_Price, from_Date, to_Date, iS_ACTIVE, entry_Date, unique_Promotion_ID, customers_Group_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Promotions_Update")]
		public int Promotions_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Total_Price", DbType="Decimal")] System.Nullable<decimal> total_Price, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Promotion_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Promotion_ID, [Parameter(Name="Customers_Group_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customers_Group_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, item_ID, quantity, total_Price, from_Date, to_Date, iS_ACTIVE, entry_Date, unique_Promotion_ID, customers_Group_ID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Providers_Delete")]
		public int Providers_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Providers_Insert")]
		public int Providers_Insert([Parameter(Name="Provider_Name", DbType="NVarChar(MAX)")] string provider_Name, [Parameter(Name="Mobile", DbType="NVarChar(MAX)")] string mobile, [Parameter(Name="Phone", DbType="NVarChar(MAX)")] string phone, [Parameter(Name="Address", DbType="NVarChar(MAX)")] string address, [Parameter(Name="Email", DbType="NVarChar(MAX)")] string email, [Parameter(Name="Website", DbType="NVarChar(MAX)")] string website)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), provider_Name, mobile, phone, address, email, website);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Providers_Update")]
		public int Providers_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Provider_Name", DbType="NVarChar(MAX)")] string provider_Name, [Parameter(Name="Mobile", DbType="NVarChar(MAX)")] string mobile, [Parameter(Name="Phone", DbType="NVarChar(MAX)")] string phone, [Parameter(Name="Address", DbType="NVarChar(MAX)")] string address, [Parameter(Name="Email", DbType="NVarChar(MAX)")] string email, [Parameter(Name="Website", DbType="NVarChar(MAX)")] string website, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, provider_Name, mobile, phone, address, email, website, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Salesman_Store_Delete")]
		public int Salesman_Store_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Salesman_Store_Insert")]
		public int Salesman_Store_Insert([Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Delivery_Date", DbType="DateTime")] System.Nullable<System.DateTime> delivery_Date, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="User_Vehicle_Number", DbType="NVarChar(MAX)")] string user_Vehicle_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), item_ID, user_ID, delivery_Date, quantity, entry_Date, user_Vehicle_Number);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Salesman_Store_Update")]
		public int Salesman_Store_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Delivery_Date", DbType="DateTime")] System.Nullable<System.DateTime> delivery_Date, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="User_Vehicle_Number", DbType="NVarChar(MAX)")] string user_Vehicle_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, item_ID, user_ID, delivery_Date, quantity, entry_Date, user_Vehicle_Number);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Salesman_Visits_Delete")]
		public int Salesman_Visits_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Salesman_Visits_Insert")]
		public int Salesman_Visits_Insert([Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Visit_Date", DbType="DateTime")] System.Nullable<System.DateTime> visit_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Visit_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Visit_ID, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_ID, customer_ID, visit_Date, entry_Date, unique_Visit_ID, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Salesman_Visits_Update")]
		public int Salesman_Visits_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Customer_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> customer_ID, [Parameter(Name="Visit_Date", DbType="DateTime")] System.Nullable<System.DateTime> visit_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="Unique_Visit_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> unique_Visit_ID, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_ID, customer_ID, visit_Date, entry_Date, unique_Visit_ID, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Stores_Delete")]
		public int Stores_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Stores_Insert")]
		public int Stores_Insert([Parameter(Name="Store_Name", DbType="NVarChar(MAX)")] string store_Name, [Parameter(Name="Notes", DbType="NVarChar(MAX)")] string notes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), store_Name, notes);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Stores_Items_Delete")]
		public int Stores_Items_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Stores_Items_Insert")]
		public int Stores_Items_Insert([Parameter(Name="Store_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> store_ID, [Parameter(Name="Category_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> category_ID, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), store_ID, category_ID, item_ID, quantity, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Stores_Items_Update")]
		public int Stores_Items_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Store_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> store_ID, [Parameter(Name="Category_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> category_ID, [Parameter(Name="Item_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> item_ID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, store_ID, category_ID, item_ID, quantity, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Stores_Update")]
		public int Stores_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Store_Name", DbType="NVarChar(MAX)")] string store_Name, [Parameter(Name="Notes", DbType="NVarChar(MAX)")] string notes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, store_Name, notes);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Suggested_Clients_Delete")]
		public int Suggested_Clients_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Suggested_Clients_Insert")]
		public int Suggested_Clients_Insert([Parameter(Name="Customer_Title", DbType="NVarChar(MAX)")] string customer_Title, [Parameter(Name="Fullname", DbType="NVarChar(MAX)")] string fullname, [Parameter(Name="Address", DbType="NVarChar(MAX)")] string address, [Parameter(Name="Phone", DbType="NVarChar(MAX)")] string phone, [Parameter(Name="Mobile", DbType="NVarChar(MAX)")] string mobile, [Parameter(Name="Date_Added", DbType="DateTime")] System.Nullable<System.DateTime> date_Added, [Parameter(Name="LOCATION_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> lOCATION_ID, [Parameter(Name="Related_User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> related_User_ID, [Parameter(Name="Send_Balance_Newsletter", DbType="Bit")] System.Nullable<bool> send_Balance_Newsletter, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer_Title, fullname, address, phone, mobile, date_Added, lOCATION_ID, related_User_ID, send_Balance_Newsletter, entry_Date, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Suggested_Clients_Update")]
		public int Suggested_Clients_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Customer_Title", DbType="NVarChar(MAX)")] string customer_Title, [Parameter(Name="Fullname", DbType="NVarChar(MAX)")] string fullname, [Parameter(Name="Address", DbType="NVarChar(MAX)")] string address, [Parameter(Name="Phone", DbType="NVarChar(MAX)")] string phone, [Parameter(Name="Mobile", DbType="NVarChar(MAX)")] string mobile, [Parameter(Name="Date_Added", DbType="DateTime")] System.Nullable<System.DateTime> date_Added, [Parameter(Name="LOCATION_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> lOCATION_ID, [Parameter(Name="Related_User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> related_User_ID, [Parameter(Name="Send_Balance_Newsletter", DbType="Bit")] System.Nullable<bool> send_Balance_Newsletter, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="IS_ACKNOWLEDGE", DbType="Bit")] System.Nullable<bool> iS_ACKNOWLEDGE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customer_Title, fullname, address, phone, mobile, date_Added, lOCATION_ID, related_User_ID, send_Balance_Newsletter, entry_Date, iS_ACKNOWLEDGE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Cars_Delete")]
		public int Users_Cars_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Cars_Insert")]
		public int Users_Cars_Insert([Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Delivery_Date", DbType="DateTime")] System.Nullable<System.DateTime> delivery_Date, [Parameter(Name="Car_Vehicle_Number", DbType="NVarChar(MAX)")] string car_Vehicle_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_ID, delivery_Date, car_Vehicle_Number);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Cars_Update")]
		public int Users_Cars_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Delivery_Date", DbType="DateTime")] System.Nullable<System.DateTime> delivery_Date, [Parameter(Name="Car_Vehicle_Number", DbType="NVarChar(MAX)")] string car_Vehicle_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_ID, delivery_Date, car_Vehicle_Number);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Days_Off_Delete")]
		public int Users_Days_Off_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Days_Off_Insert")]
		public int Users_Days_Off_Insert([Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_ID, from_Date, to_Date, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Days_Off_Update")]
		public int Users_Days_Off_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_ID, from_Date, to_Date, entry_Date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Delete")]
		public int Users_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Insert")]
		public int Users_Insert([Parameter(Name="User_Type_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_Type_ID, [Parameter(Name="Department_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> department_ID, [Parameter(Name="User_Title", DbType="NVarChar(MAX)")] string user_Title, [Parameter(Name="FirstName", DbType="NVarChar(MAX)")] string firstName, [Parameter(Name="LastName", DbType="NVarChar(MAX)")] string lastName, [Parameter(Name="Position", DbType="NVarChar(MAX)")] string position, [Parameter(Name="Organization", DbType="NVarChar(MAX)")] string organization, [Parameter(Name="Join_Date", DbType="DateTime")] System.Nullable<System.DateTime> join_Date, [Parameter(DbType="NVarChar(MAX)")] string username, [Parameter(DbType="NVarChar(MAX)")] string password, [Parameter(Name="IS_ACTIVE", DbType="Bit")] System.Nullable<bool> iS_ACTIVE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_Type_ID, department_ID, user_Title, firstName, lastName, position, organization, join_Date, username, password, iS_ACTIVE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Payments_Delete")]
		public int Users_Payments_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Payments_Insert")]
		public int Users_Payments_Insert([Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="IS_Award", DbType="Bit")] System.Nullable<bool> iS_Award, [Parameter(Name="IS_Salary", DbType="Bit")] System.Nullable<bool> iS_Salary, [Parameter(Name="IS_Discount", DbType="Bit")] System.Nullable<bool> iS_Discount, [Parameter(Name="IS_Expense", DbType="Bit")] System.Nullable<bool> iS_Expense, [Parameter(Name="Notes", DbType="NVarChar(MAX)")] string notes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_ID, amount, from_Date, to_Date, entry_Date, iS_Award, iS_Salary, iS_Discount, iS_Expense, notes);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Payments_Update")]
		public int Users_Payments_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="Amount", DbType="Decimal")] System.Nullable<decimal> amount, [Parameter(Name="From_Date", DbType="DateTime")] System.Nullable<System.DateTime> from_Date, [Parameter(Name="To_Date", DbType="DateTime")] System.Nullable<System.DateTime> to_Date, [Parameter(Name="Entry_Date", DbType="DateTime")] System.Nullable<System.DateTime> entry_Date, [Parameter(Name="IS_Award", DbType="Bit")] System.Nullable<bool> iS_Award, [Parameter(Name="IS_Salary", DbType="Bit")] System.Nullable<bool> iS_Salary, [Parameter(Name="IS_Discount", DbType="Bit")] System.Nullable<bool> iS_Discount, [Parameter(Name="IS_Expense", DbType="Bit")] System.Nullable<bool> iS_Expense, [Parameter(Name="Notes", DbType="NVarChar(MAX)")] string notes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, user_ID, amount, from_Date, to_Date, entry_Date, iS_Award, iS_Salary, iS_Discount, iS_Expense, notes);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Permissions_Delete")]
		public int Users_Permissions_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Permissions_Insert")]
		public int Users_Permissions_Insert([Parameter(Name="Section_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> section_ID, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="CAN_VIEW", DbType="Bit")] System.Nullable<bool> cAN_VIEW, [Parameter(Name="CAN_ADD", DbType="Bit")] System.Nullable<bool> cAN_ADD, [Parameter(Name="CAN_EDIT", DbType="Bit")] System.Nullable<bool> cAN_EDIT, [Parameter(Name="CAN_DELETE", DbType="Bit")] System.Nullable<bool> cAN_DELETE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), section_ID, user_ID, cAN_VIEW, cAN_ADD, cAN_EDIT, cAN_DELETE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Permissions_Update")]
		public int Users_Permissions_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Section_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> section_ID, [Parameter(Name="User_ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> user_ID, [Parameter(Name="CAN_VIEW", DbType="Bit")] System.Nullable<bool> cAN_VIEW, [Parameter(Name="CAN_ADD", DbType="Bit")] System.Nullable<bool> cAN_ADD, [Parameter(Name="CAN_EDIT", DbType="Bit")] System.Nullable<bool> cAN_EDIT, [Parameter(Name="CAN_DELETE", DbType="Bit")] System.Nullable<bool> cAN_DELETE)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, section_ID, user_ID, cAN_VIEW, cAN_ADD, cAN_EDIT, cAN_DELETE);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Types_Delete")]
		public int Users_Types_Delete([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Types_Insert")]
		public int Users_Types_Insert([Parameter(Name="Type", DbType="NVarChar(MAX)")] string type, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, note);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Users_Types_Update")]
		public int Users_Types_Update([Parameter(Name="ID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> iD, [Parameter(Name="Type", DbType="NVarChar(MAX)")] string type, [Parameter(Name="Note", DbType="NVarChar(MAX)")] string note)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, type, note);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Action_Log")]
	public partial class Action_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.Guid> _Section_ID;
		
		private System.Nullable<bool> _IS_Mobile;
		
		private System.Nullable<System.Guid> _Related_Object_ID;
		
		private string _Operation;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<bool> _IS_ACKNOWLEDGE;
		
		private EntityRef<Control_Section> _Control_Section;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnSection_IDChanging(System.Nullable<System.Guid> value);
    partial void OnSection_IDChanged();
    partial void OnIS_MobileChanging(System.Nullable<bool> value);
    partial void OnIS_MobileChanged();
    partial void OnRelated_Object_IDChanging(System.Nullable<System.Guid> value);
    partial void OnRelated_Object_IDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnIS_ACKNOWLEDGEChanging(System.Nullable<bool> value);
    partial void OnIS_ACKNOWLEDGEChanged();
    #endregion
		
		public Action_Log()
		{
			this._Control_Section = default(EntityRef<Control_Section>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Section_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Section_ID
		{
			get
			{
				return this._Section_ID;
			}
			set
			{
				if ((this._Section_ID != value))
				{
					if (this._Control_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSection_IDChanging(value);
					this.SendPropertyChanging();
					this._Section_ID = value;
					this.SendPropertyChanged("Section_ID");
					this.OnSection_IDChanged();
				}
			}
		}
		
		[Column(Storage="_IS_Mobile", DbType="Bit")]
		public System.Nullable<bool> IS_Mobile
		{
			get
			{
				return this._IS_Mobile;
			}
			set
			{
				if ((this._IS_Mobile != value))
				{
					this.OnIS_MobileChanging(value);
					this.SendPropertyChanging();
					this._IS_Mobile = value;
					this.SendPropertyChanged("IS_Mobile");
					this.OnIS_MobileChanged();
				}
			}
		}
		
		[Column(Storage="_Related_Object_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Related_Object_ID
		{
			get
			{
				return this._Related_Object_ID;
			}
			set
			{
				if ((this._Related_Object_ID != value))
				{
					this.OnRelated_Object_IDChanging(value);
					this.SendPropertyChanging();
					this._Related_Object_ID = value;
					this.SendPropertyChanged("Related_Object_ID");
					this.OnRelated_Object_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="NVarChar(MAX)")]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACKNOWLEDGE", DbType="Bit")]
		public System.Nullable<bool> IS_ACKNOWLEDGE
		{
			get
			{
				return this._IS_ACKNOWLEDGE;
			}
			set
			{
				if ((this._IS_ACKNOWLEDGE != value))
				{
					this.OnIS_ACKNOWLEDGEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACKNOWLEDGE = value;
					this.SendPropertyChanged("IS_ACKNOWLEDGE");
					this.OnIS_ACKNOWLEDGEChanged();
				}
			}
		}
		
		[Association(Name="Control_Section_Action_Log", Storage="_Control_Section", ThisKey="Section_ID", IsForeignKey=true)]
		public Control_Section Control_Section
		{
			get
			{
				return this._Control_Section.Entity;
			}
			set
			{
				Control_Section previousValue = this._Control_Section.Entity;
				if (((previousValue != value) 
							|| (this._Control_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Control_Section.Entity = null;
						previousValue.Action_Logs.Remove(this);
					}
					this._Control_Section.Entity = value;
					if ((value != null))
					{
						value.Action_Logs.Add(this);
						this._Section_ID = value.ID;
					}
					else
					{
						this._Section_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Control_Section");
				}
			}
		}
		
		[Association(Name="User_Action_Log", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Action_Logs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Action_Logs.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users_Types")]
	public partial class Users_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Type;
		
		private string _Note;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Users_Type()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="Users_Type_User", Storage="_Users", OtherKey="User_Type_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Users_Type = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Users_Type = null;
		}
	}
	
	[Table(Name="dbo.Area")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Area_Title;
		
		private string _X_LOC;
		
		private string _Y_LOC;
		
		private string _Map_URL;
		
		private string _Note;
		
		private EntitySet<Customers_Location> _Customers_Locations;
		
		private EntitySet<Department> _Departments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnArea_TitleChanging(string value);
    partial void OnArea_TitleChanged();
    partial void OnX_LOCChanging(string value);
    partial void OnX_LOCChanged();
    partial void OnY_LOCChanging(string value);
    partial void OnY_LOCChanged();
    partial void OnMap_URLChanging(string value);
    partial void OnMap_URLChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Area()
		{
			this._Customers_Locations = new EntitySet<Customers_Location>(new Action<Customers_Location>(this.attach_Customers_Locations), new Action<Customers_Location>(this.detach_Customers_Locations));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Area_Title", DbType="NVarChar(MAX)")]
		public string Area_Title
		{
			get
			{
				return this._Area_Title;
			}
			set
			{
				if ((this._Area_Title != value))
				{
					this.OnArea_TitleChanging(value);
					this.SendPropertyChanging();
					this._Area_Title = value;
					this.SendPropertyChanged("Area_Title");
					this.OnArea_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_X_LOC", DbType="NVarChar(MAX)")]
		public string X_LOC
		{
			get
			{
				return this._X_LOC;
			}
			set
			{
				if ((this._X_LOC != value))
				{
					this.OnX_LOCChanging(value);
					this.SendPropertyChanging();
					this._X_LOC = value;
					this.SendPropertyChanged("X_LOC");
					this.OnX_LOCChanged();
				}
			}
		}
		
		[Column(Storage="_Y_LOC", DbType="NVarChar(MAX)")]
		public string Y_LOC
		{
			get
			{
				return this._Y_LOC;
			}
			set
			{
				if ((this._Y_LOC != value))
				{
					this.OnY_LOCChanging(value);
					this.SendPropertyChanging();
					this._Y_LOC = value;
					this.SendPropertyChanged("Y_LOC");
					this.OnY_LOCChanged();
				}
			}
		}
		
		[Column(Storage="_Map_URL", DbType="NVarChar(MAX)")]
		public string Map_URL
		{
			get
			{
				return this._Map_URL;
			}
			set
			{
				if ((this._Map_URL != value))
				{
					this.OnMap_URLChanging(value);
					this.SendPropertyChanging();
					this._Map_URL = value;
					this.SendPropertyChanged("Map_URL");
					this.OnMap_URLChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="Area_Customers_Location", Storage="_Customers_Locations", OtherKey="Area_ID")]
		public EntitySet<Customers_Location> Customers_Locations
		{
			get
			{
				return this._Customers_Locations;
			}
			set
			{
				this._Customers_Locations.Assign(value);
			}
		}
		
		[Association(Name="Area_Department", Storage="_Departments", OtherKey="Area_ID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers_Locations(Customers_Location entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Customers_Locations(Customers_Location entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Category_Name;
		
		private string _Notes;
		
		private System.Nullable<System.Guid> _Parent_ID;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private System.Nullable<int> _level_depth;
		
		private EntitySet<Stores_Item> _Stores_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCategory_NameChanging(string value);
    partial void OnCategory_NameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnParent_IDChanging(System.Nullable<System.Guid> value);
    partial void OnParent_IDChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    partial void Onlevel_depthChanging(System.Nullable<int> value);
    partial void Onlevel_depthChanged();
    #endregion
		
		public Category()
		{
			this._Stores_Items = new EntitySet<Stores_Item>(new Action<Stores_Item>(this.attach_Stores_Items), new Action<Stores_Item>(this.detach_Stores_Items));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Category_Name", DbType="NVarChar(MAX)")]
		public string Category_Name
		{
			get
			{
				return this._Category_Name;
			}
			set
			{
				if ((this._Category_Name != value))
				{
					this.OnCategory_NameChanging(value);
					this.SendPropertyChanging();
					this._Category_Name = value;
					this.SendPropertyChanged("Category_Name");
					this.OnCategory_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Parent_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Parent_ID
		{
			get
			{
				return this._Parent_ID;
			}
			set
			{
				if ((this._Parent_ID != value))
				{
					this.OnParent_IDChanging(value);
					this.SendPropertyChanging();
					this._Parent_ID = value;
					this.SendPropertyChanged("Parent_ID");
					this.OnParent_IDChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACTIVE", DbType="Bit")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[Column(Storage="_level_depth", DbType="Int")]
		public System.Nullable<int> level_depth
		{
			get
			{
				return this._level_depth;
			}
			set
			{
				if ((this._level_depth != value))
				{
					this.Onlevel_depthChanging(value);
					this.SendPropertyChanging();
					this._level_depth = value;
					this.SendPropertyChanged("level_depth");
					this.Onlevel_depthChanged();
				}
			}
		}
		
		[Association(Name="Category_Stores_Item", Storage="_Stores_Items", OtherKey="Category_ID")]
		public EntitySet<Stores_Item> Stores_Items
		{
			get
			{
				return this._Stores_Items;
			}
			set
			{
				this._Stores_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stores_Items(Stores_Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Stores_Items(Stores_Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Control_Sections")]
	public partial class Control_Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Section_name;
		
		private System.Nullable<bool> _IS_MOBILE;
		
		private EntitySet<Action_Log> _Action_Logs;
		
		private EntitySet<Users_Permission> _Users_Permissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSection_nameChanging(string value);
    partial void OnSection_nameChanged();
    partial void OnIS_MOBILEChanging(System.Nullable<bool> value);
    partial void OnIS_MOBILEChanged();
    #endregion
		
		public Control_Section()
		{
			this._Action_Logs = new EntitySet<Action_Log>(new Action<Action_Log>(this.attach_Action_Logs), new Action<Action_Log>(this.detach_Action_Logs));
			this._Users_Permissions = new EntitySet<Users_Permission>(new Action<Users_Permission>(this.attach_Users_Permissions), new Action<Users_Permission>(this.detach_Users_Permissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Section_name", DbType="NVarChar(MAX)")]
		public string Section_name
		{
			get
			{
				return this._Section_name;
			}
			set
			{
				if ((this._Section_name != value))
				{
					this.OnSection_nameChanging(value);
					this.SendPropertyChanging();
					this._Section_name = value;
					this.SendPropertyChanged("Section_name");
					this.OnSection_nameChanged();
				}
			}
		}
		
		[Column(Storage="_IS_MOBILE", DbType="Bit")]
		public System.Nullable<bool> IS_MOBILE
		{
			get
			{
				return this._IS_MOBILE;
			}
			set
			{
				if ((this._IS_MOBILE != value))
				{
					this.OnIS_MOBILEChanging(value);
					this.SendPropertyChanging();
					this._IS_MOBILE = value;
					this.SendPropertyChanged("IS_MOBILE");
					this.OnIS_MOBILEChanged();
				}
			}
		}
		
		[Association(Name="Control_Section_Action_Log", Storage="_Action_Logs", OtherKey="Section_ID")]
		public EntitySet<Action_Log> Action_Logs
		{
			get
			{
				return this._Action_Logs;
			}
			set
			{
				this._Action_Logs.Assign(value);
			}
		}
		
		[Association(Name="Control_Section_Users_Permission", Storage="_Users_Permissions", OtherKey="Section_ID")]
		public EntitySet<Users_Permission> Users_Permissions
		{
			get
			{
				return this._Users_Permissions;
			}
			set
			{
				this._Users_Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Action_Logs(Action_Log entity)
		{
			this.SendPropertyChanging();
			entity.Control_Section = this;
		}
		
		private void detach_Action_Logs(Action_Log entity)
		{
			this.SendPropertyChanging();
			entity.Control_Section = null;
		}
		
		private void attach_Users_Permissions(Users_Permission entity)
		{
			this.SendPropertyChanging();
			entity.Control_Section = this;
		}
		
		private void detach_Users_Permissions(Users_Permission entity)
		{
			this.SendPropertyChanging();
			entity.Control_Section = null;
		}
	}
	
	[Table(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Customer_Title;
		
		private string _Fullname;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Mobile;
		
		private System.Nullable<System.DateTime> _Date_Added;
		
		private System.Nullable<bool> _Can_Sale;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private System.Nullable<bool> _IS_DELETED;
		
		private System.Nullable<System.Guid> _LOCATION_ID;
		
		private System.Nullable<System.Guid> _Related_User_ID;
		
		private System.Nullable<bool> _Send_Balance_Newsletter;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_Customer_ID;
		
		private EntitySet<Customers_Bill> _Customers_Bills;
		
		private EntitySet<Customers_Group1> _Customers_Group1s;
		
		private EntitySet<Customers_Location> _Customers_Locations;
		
		private EntitySet<Navigation_Customer> _Navigation_Customers;
		
		private EntitySet<Payments_Detail> _Payments_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomer_TitleChanging(string value);
    partial void OnCustomer_TitleChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnDate_AddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_AddedChanged();
    partial void OnCan_SaleChanging(System.Nullable<bool> value);
    partial void OnCan_SaleChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    partial void OnIS_DELETEDChanging(System.Nullable<bool> value);
    partial void OnIS_DELETEDChanged();
    partial void OnLOCATION_IDChanging(System.Nullable<System.Guid> value);
    partial void OnLOCATION_IDChanged();
    partial void OnRelated_User_IDChanging(System.Nullable<System.Guid> value);
    partial void OnRelated_User_IDChanged();
    partial void OnSend_Balance_NewsletterChanging(System.Nullable<bool> value);
    partial void OnSend_Balance_NewsletterChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_Customer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_Customer_IDChanged();
    #endregion
		
		public Customer()
		{
			this._Customers_Bills = new EntitySet<Customers_Bill>(new Action<Customers_Bill>(this.attach_Customers_Bills), new Action<Customers_Bill>(this.detach_Customers_Bills));
			this._Customers_Group1s = new EntitySet<Customers_Group1>(new Action<Customers_Group1>(this.attach_Customers_Group1s), new Action<Customers_Group1>(this.detach_Customers_Group1s));
			this._Customers_Locations = new EntitySet<Customers_Location>(new Action<Customers_Location>(this.attach_Customers_Locations), new Action<Customers_Location>(this.detach_Customers_Locations));
			this._Navigation_Customers = new EntitySet<Navigation_Customer>(new Action<Navigation_Customer>(this.attach_Navigation_Customers), new Action<Navigation_Customer>(this.detach_Navigation_Customers));
			this._Payments_Details = new EntitySet<Payments_Detail>(new Action<Payments_Detail>(this.attach_Payments_Details), new Action<Payments_Detail>(this.detach_Payments_Details));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_Title", DbType="NVarChar(MAX)")]
		public string Customer_Title
		{
			get
			{
				return this._Customer_Title;
			}
			set
			{
				if ((this._Customer_Title != value))
				{
					this.OnCustomer_TitleChanging(value);
					this.SendPropertyChanging();
					this._Customer_Title = value;
					this.SendPropertyChanged("Customer_Title");
					this.OnCustomer_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Fullname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Mobile", DbType="NVarChar(MAX)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[Column(Storage="_Date_Added", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_Added
		{
			get
			{
				return this._Date_Added;
			}
			set
			{
				if ((this._Date_Added != value))
				{
					this.OnDate_AddedChanging(value);
					this.SendPropertyChanging();
					this._Date_Added = value;
					this.SendPropertyChanged("Date_Added");
					this.OnDate_AddedChanged();
				}
			}
		}
		
		[Column(Storage="_Can_Sale", DbType="Bit")]
		public System.Nullable<bool> Can_Sale
		{
			get
			{
				return this._Can_Sale;
			}
			set
			{
				if ((this._Can_Sale != value))
				{
					this.OnCan_SaleChanging(value);
					this.SendPropertyChanging();
					this._Can_Sale = value;
					this.SendPropertyChanged("Can_Sale");
					this.OnCan_SaleChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACTIVE", DbType="Bit")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[Column(Storage="_IS_DELETED", DbType="Bit")]
		public System.Nullable<bool> IS_DELETED
		{
			get
			{
				return this._IS_DELETED;
			}
			set
			{
				if ((this._IS_DELETED != value))
				{
					this.OnIS_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IS_DELETED = value;
					this.SendPropertyChanged("IS_DELETED");
					this.OnIS_DELETEDChanged();
				}
			}
		}
		
		[Column(Storage="_LOCATION_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LOCATION_ID
		{
			get
			{
				return this._LOCATION_ID;
			}
			set
			{
				if ((this._LOCATION_ID != value))
				{
					this.OnLOCATION_IDChanging(value);
					this.SendPropertyChanging();
					this._LOCATION_ID = value;
					this.SendPropertyChanged("LOCATION_ID");
					this.OnLOCATION_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Related_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Related_User_ID
		{
			get
			{
				return this._Related_User_ID;
			}
			set
			{
				if ((this._Related_User_ID != value))
				{
					this.OnRelated_User_IDChanging(value);
					this.SendPropertyChanging();
					this._Related_User_ID = value;
					this.SendPropertyChanged("Related_User_ID");
					this.OnRelated_User_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Send_Balance_Newsletter", DbType="Bit")]
		public System.Nullable<bool> Send_Balance_Newsletter
		{
			get
			{
				return this._Send_Balance_Newsletter;
			}
			set
			{
				if ((this._Send_Balance_Newsletter != value))
				{
					this.OnSend_Balance_NewsletterChanging(value);
					this.SendPropertyChanging();
					this._Send_Balance_Newsletter = value;
					this.SendPropertyChanged("Send_Balance_Newsletter");
					this.OnSend_Balance_NewsletterChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_Customer_ID
		{
			get
			{
				return this._Unique_Customer_ID;
			}
			set
			{
				if ((this._Unique_Customer_ID != value))
				{
					this.OnUnique_Customer_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_Customer_ID = value;
					this.SendPropertyChanged("Unique_Customer_ID");
					this.OnUnique_Customer_IDChanged();
				}
			}
		}
		
		[Association(Name="Customer_Customers_Bill", Storage="_Customers_Bills", OtherKey="Customer_ID")]
		public EntitySet<Customers_Bill> Customers_Bills
		{
			get
			{
				return this._Customers_Bills;
			}
			set
			{
				this._Customers_Bills.Assign(value);
			}
		}
		
		[Association(Name="Customer_Customers_Group1", Storage="_Customers_Group1s", OtherKey="Customer_ID")]
		public EntitySet<Customers_Group1> Customers_Group1s
		{
			get
			{
				return this._Customers_Group1s;
			}
			set
			{
				this._Customers_Group1s.Assign(value);
			}
		}
		
		[Association(Name="Customer_Customers_Location", Storage="_Customers_Locations", OtherKey="Customer_ID")]
		public EntitySet<Customers_Location> Customers_Locations
		{
			get
			{
				return this._Customers_Locations;
			}
			set
			{
				this._Customers_Locations.Assign(value);
			}
		}
		
		[Association(Name="Customer_Navigation_Customer", Storage="_Navigation_Customers", OtherKey="Customer_ID")]
		public EntitySet<Navigation_Customer> Navigation_Customers
		{
			get
			{
				return this._Navigation_Customers;
			}
			set
			{
				this._Navigation_Customers.Assign(value);
			}
		}
		
		[Association(Name="Customer_Payments_Detail", Storage="_Payments_Details", OtherKey="Customer_ID")]
		public EntitySet<Payments_Detail> Payments_Details
		{
			get
			{
				return this._Payments_Details;
			}
			set
			{
				this._Payments_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers_Bills(Customers_Bill entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Customers_Bills(Customers_Bill entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Customers_Group1s(Customers_Group1 entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Customers_Group1s(Customers_Group1 entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Customers_Locations(Customers_Location entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Customers_Locations(Customers_Location entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Navigation_Customers(Navigation_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Navigation_Customers(Navigation_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Payments_Details(Payments_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Payments_Details(Payments_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.Customers_Bills")]
	public partial class Customers_Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Customer_ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.DateTime> _Bill_Date;
		
		private System.Nullable<bool> _IS_PAID;
		
		private System.Nullable<bool> _IS_ACKNOWLEDGE;
		
		private System.Nullable<bool> _IS_DELIVERED;
		
		private System.Nullable<bool> _IS_CANCELED;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_Bill_ID;
		
		private System.Nullable<int> _Bill_Status;
		
		private System.Nullable<int> _Bill_Type;
		
		private System.Nullable<bool> _IS_ORDER;
		
		private EntitySet<Customers_Bills_Detail> _Customers_Bills_Details;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_IDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnBill_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnBill_DateChanged();
    partial void OnIS_PAIDChanging(System.Nullable<bool> value);
    partial void OnIS_PAIDChanged();
    partial void OnIS_ACKNOWLEDGEChanging(System.Nullable<bool> value);
    partial void OnIS_ACKNOWLEDGEChanged();
    partial void OnIS_DELIVEREDChanging(System.Nullable<bool> value);
    partial void OnIS_DELIVEREDChanged();
    partial void OnIS_CANCELEDChanging(System.Nullable<bool> value);
    partial void OnIS_CANCELEDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_Bill_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_Bill_IDChanged();
    partial void OnBill_StatusChanging(System.Nullable<int> value);
    partial void OnBill_StatusChanged();
    partial void OnBill_TypeChanging(System.Nullable<int> value);
    partial void OnBill_TypeChanged();
    partial void OnIS_ORDERChanging(System.Nullable<bool> value);
    partial void OnIS_ORDERChanged();
    #endregion
		
		public Customers_Bill()
		{
			this._Customers_Bills_Details = new EntitySet<Customers_Bills_Detail>(new Action<Customers_Bills_Detail>(this.attach_Customers_Bills_Details), new Action<Customers_Bills_Detail>(this.detach_Customers_Bills_Details));
			this._Customer = default(EntityRef<Customer>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Bill_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Bill_Date
		{
			get
			{
				return this._Bill_Date;
			}
			set
			{
				if ((this._Bill_Date != value))
				{
					this.OnBill_DateChanging(value);
					this.SendPropertyChanging();
					this._Bill_Date = value;
					this.SendPropertyChanged("Bill_Date");
					this.OnBill_DateChanged();
				}
			}
		}
		
		[Column(Storage="_IS_PAID", DbType="Bit")]
		public System.Nullable<bool> IS_PAID
		{
			get
			{
				return this._IS_PAID;
			}
			set
			{
				if ((this._IS_PAID != value))
				{
					this.OnIS_PAIDChanging(value);
					this.SendPropertyChanging();
					this._IS_PAID = value;
					this.SendPropertyChanged("IS_PAID");
					this.OnIS_PAIDChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACKNOWLEDGE", DbType="Bit")]
		public System.Nullable<bool> IS_ACKNOWLEDGE
		{
			get
			{
				return this._IS_ACKNOWLEDGE;
			}
			set
			{
				if ((this._IS_ACKNOWLEDGE != value))
				{
					this.OnIS_ACKNOWLEDGEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACKNOWLEDGE = value;
					this.SendPropertyChanged("IS_ACKNOWLEDGE");
					this.OnIS_ACKNOWLEDGEChanged();
				}
			}
		}
		
		[Column(Storage="_IS_DELIVERED", DbType="Bit")]
		public System.Nullable<bool> IS_DELIVERED
		{
			get
			{
				return this._IS_DELIVERED;
			}
			set
			{
				if ((this._IS_DELIVERED != value))
				{
					this.OnIS_DELIVEREDChanging(value);
					this.SendPropertyChanging();
					this._IS_DELIVERED = value;
					this.SendPropertyChanged("IS_DELIVERED");
					this.OnIS_DELIVEREDChanged();
				}
			}
		}
		
		[Column(Storage="_IS_CANCELED", DbType="Bit")]
		public System.Nullable<bool> IS_CANCELED
		{
			get
			{
				return this._IS_CANCELED;
			}
			set
			{
				if ((this._IS_CANCELED != value))
				{
					this.OnIS_CANCELEDChanging(value);
					this.SendPropertyChanging();
					this._IS_CANCELED = value;
					this.SendPropertyChanged("IS_CANCELED");
					this.OnIS_CANCELEDChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_Bill_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_Bill_ID
		{
			get
			{
				return this._Unique_Bill_ID;
			}
			set
			{
				if ((this._Unique_Bill_ID != value))
				{
					this.OnUnique_Bill_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_Bill_ID = value;
					this.SendPropertyChanged("Unique_Bill_ID");
					this.OnUnique_Bill_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Bill_Status", DbType="Int")]
		public System.Nullable<int> Bill_Status
		{
			get
			{
				return this._Bill_Status;
			}
			set
			{
				if ((this._Bill_Status != value))
				{
					this.OnBill_StatusChanging(value);
					this.SendPropertyChanging();
					this._Bill_Status = value;
					this.SendPropertyChanged("Bill_Status");
					this.OnBill_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Bill_Type", DbType="Int")]
		public System.Nullable<int> Bill_Type
		{
			get
			{
				return this._Bill_Type;
			}
			set
			{
				if ((this._Bill_Type != value))
				{
					this.OnBill_TypeChanging(value);
					this.SendPropertyChanging();
					this._Bill_Type = value;
					this.SendPropertyChanged("Bill_Type");
					this.OnBill_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ORDER", DbType="Bit")]
		public System.Nullable<bool> IS_ORDER
		{
			get
			{
				return this._IS_ORDER;
			}
			set
			{
				if ((this._IS_ORDER != value))
				{
					this.OnIS_ORDERChanging(value);
					this.SendPropertyChanging();
					this._IS_ORDER = value;
					this.SendPropertyChanged("IS_ORDER");
					this.OnIS_ORDERChanged();
				}
			}
		}
		
		[Association(Name="Customers_Bill_Customers_Bills_Detail", Storage="_Customers_Bills_Details", OtherKey="Bill_ID")]
		public EntitySet<Customers_Bills_Detail> Customers_Bills_Details
		{
			get
			{
				return this._Customers_Bills_Details;
			}
			set
			{
				this._Customers_Bills_Details.Assign(value);
			}
		}
		
		[Association(Name="Customer_Customers_Bill", Storage="_Customer", ThisKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Customers_Bills.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Customers_Bills.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="User_Customers_Bill", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Customers_Bills.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Customers_Bills.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers_Bills_Details(Customers_Bills_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Customers_Bill = this;
		}
		
		private void detach_Customers_Bills_Details(Customers_Bills_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Customers_Bill = null;
		}
	}
	
	[Table(Name="dbo.Customers_Bills_Details")]
	public partial class Customers_Bills_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Bill_ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<bool> _IS_ACKNOWLEDGE;
		
		private EntityRef<Customers_Bill> _Customers_Bill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnBill_IDChanging(System.Nullable<System.Guid> value);
    partial void OnBill_IDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnIS_ACKNOWLEDGEChanging(System.Nullable<bool> value);
    partial void OnIS_ACKNOWLEDGEChanged();
    #endregion
		
		public Customers_Bills_Detail()
		{
			this._Customers_Bill = default(EntityRef<Customers_Bill>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Bill_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Bill_ID
		{
			get
			{
				return this._Bill_ID;
			}
			set
			{
				if ((this._Bill_ID != value))
				{
					if (this._Customers_Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBill_IDChanging(value);
					this.SendPropertyChanging();
					this._Bill_ID = value;
					this.SendPropertyChanged("Bill_ID");
					this.OnBill_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACKNOWLEDGE", DbType="Bit")]
		public System.Nullable<bool> IS_ACKNOWLEDGE
		{
			get
			{
				return this._IS_ACKNOWLEDGE;
			}
			set
			{
				if ((this._IS_ACKNOWLEDGE != value))
				{
					this.OnIS_ACKNOWLEDGEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACKNOWLEDGE = value;
					this.SendPropertyChanged("IS_ACKNOWLEDGE");
					this.OnIS_ACKNOWLEDGEChanged();
				}
			}
		}
		
		[Association(Name="Customers_Bill_Customers_Bills_Detail", Storage="_Customers_Bill", ThisKey="Bill_ID", IsForeignKey=true)]
		public Customers_Bill Customers_Bill
		{
			get
			{
				return this._Customers_Bill.Entity;
			}
			set
			{
				Customers_Bill previousValue = this._Customers_Bill.Entity;
				if (((previousValue != value) 
							|| (this._Customers_Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customers_Bill.Entity = null;
						previousValue.Customers_Bills_Details.Remove(this);
					}
					this._Customers_Bill.Entity = value;
					if ((value != null))
					{
						value.Customers_Bills_Details.Add(this);
						this._Bill_ID = value.ID;
					}
					else
					{
						this._Bill_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customers_Bill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Customers_Group")]
	public partial class Customers_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Group_Name;
		
		private System.Nullable<decimal> _max_balance_limit;
		
		private EntitySet<Customers_Group1> _Customers_Group1s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroup_NameChanging(string value);
    partial void OnGroup_NameChanged();
    partial void Onmax_balance_limitChanging(System.Nullable<decimal> value);
    partial void Onmax_balance_limitChanged();
    #endregion
		
		public Customers_Group()
		{
			this._Customers_Group1s = new EntitySet<Customers_Group1>(new Action<Customers_Group1>(this.attach_Customers_Group1s), new Action<Customers_Group1>(this.detach_Customers_Group1s));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Group_Name", DbType="NVarChar(MAX)")]
		public string Group_Name
		{
			get
			{
				return this._Group_Name;
			}
			set
			{
				if ((this._Group_Name != value))
				{
					this.OnGroup_NameChanging(value);
					this.SendPropertyChanging();
					this._Group_Name = value;
					this.SendPropertyChanged("Group_Name");
					this.OnGroup_NameChanged();
				}
			}
		}
		
		[Column(Storage="_max_balance_limit", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> max_balance_limit
		{
			get
			{
				return this._max_balance_limit;
			}
			set
			{
				if ((this._max_balance_limit != value))
				{
					this.Onmax_balance_limitChanging(value);
					this.SendPropertyChanging();
					this._max_balance_limit = value;
					this.SendPropertyChanged("max_balance_limit");
					this.Onmax_balance_limitChanged();
				}
			}
		}
		
		[Association(Name="Customers_Group_Customers_Group1", Storage="_Customers_Group1s", OtherKey="Customer_Group_ID")]
		public EntitySet<Customers_Group1> Customers_Group1s
		{
			get
			{
				return this._Customers_Group1s;
			}
			set
			{
				this._Customers_Group1s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers_Group1s(Customers_Group1 entity)
		{
			this.SendPropertyChanging();
			entity.Customers_Group = this;
		}
		
		private void detach_Customers_Group1s(Customers_Group1 entity)
		{
			this.SendPropertyChanging();
			entity.Customers_Group = null;
		}
	}
	
	[Table(Name="dbo.Customers_Groups")]
	public partial class Customers_Group1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Customer_Group_ID;
		
		private System.Nullable<System.Guid> _Customer_ID;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Customers_Group> _Customers_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomer_Group_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_Group_IDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_IDChanged();
    #endregion
		
		public Customers_Group1()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Customers_Group = default(EntityRef<Customers_Group>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_Group_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_Group_ID
		{
			get
			{
				return this._Customer_Group_ID;
			}
			set
			{
				if ((this._Customer_Group_ID != value))
				{
					if (this._Customers_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_Group_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_Group_ID = value;
					this.SendPropertyChanged("Customer_Group_ID");
					this.OnCustomer_Group_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Association(Name="Customer_Customers_Group1", Storage="_Customer", ThisKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Customers_Group1s.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Customers_Group1s.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Customers_Group_Customers_Group1", Storage="_Customers_Group", ThisKey="Customer_Group_ID", IsForeignKey=true)]
		public Customers_Group Customers_Group
		{
			get
			{
				return this._Customers_Group.Entity;
			}
			set
			{
				Customers_Group previousValue = this._Customers_Group.Entity;
				if (((previousValue != value) 
							|| (this._Customers_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customers_Group.Entity = null;
						previousValue.Customers_Group1s.Remove(this);
					}
					this._Customers_Group.Entity = value;
					if ((value != null))
					{
						value.Customers_Group1s.Add(this);
						this._Customer_Group_ID = value.ID;
					}
					else
					{
						this._Customer_Group_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customers_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Customers_Locations")]
	public partial class Customers_Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Customer_ID;
		
		private System.Nullable<System.Guid> _Area_ID;
		
		private string _Location_Title;
		
		private string _X_LOC;
		
		private string _Y_LOC;
		
		private string _Map_URL;
		
		private string _Note;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_IDChanged();
    partial void OnArea_IDChanging(System.Nullable<System.Guid> value);
    partial void OnArea_IDChanged();
    partial void OnLocation_TitleChanging(string value);
    partial void OnLocation_TitleChanged();
    partial void OnX_LOCChanging(string value);
    partial void OnX_LOCChanged();
    partial void OnY_LOCChanging(string value);
    partial void OnY_LOCChanged();
    partial void OnMap_URLChanging(string value);
    partial void OnMap_URLChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Customers_Location()
		{
			this._Area = default(EntityRef<Area>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Area_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Area_ID
		{
			get
			{
				return this._Area_ID;
			}
			set
			{
				if ((this._Area_ID != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArea_IDChanging(value);
					this.SendPropertyChanging();
					this._Area_ID = value;
					this.SendPropertyChanged("Area_ID");
					this.OnArea_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Location_Title", DbType="NVarChar(MAX)")]
		public string Location_Title
		{
			get
			{
				return this._Location_Title;
			}
			set
			{
				if ((this._Location_Title != value))
				{
					this.OnLocation_TitleChanging(value);
					this.SendPropertyChanging();
					this._Location_Title = value;
					this.SendPropertyChanged("Location_Title");
					this.OnLocation_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_X_LOC", DbType="NVarChar(MAX)")]
		public string X_LOC
		{
			get
			{
				return this._X_LOC;
			}
			set
			{
				if ((this._X_LOC != value))
				{
					this.OnX_LOCChanging(value);
					this.SendPropertyChanging();
					this._X_LOC = value;
					this.SendPropertyChanged("X_LOC");
					this.OnX_LOCChanged();
				}
			}
		}
		
		[Column(Storage="_Y_LOC", DbType="NVarChar(MAX)")]
		public string Y_LOC
		{
			get
			{
				return this._Y_LOC;
			}
			set
			{
				if ((this._Y_LOC != value))
				{
					this.OnY_LOCChanging(value);
					this.SendPropertyChanging();
					this._Y_LOC = value;
					this.SendPropertyChanged("Y_LOC");
					this.OnY_LOCChanged();
				}
			}
		}
		
		[Column(Storage="_Map_URL", DbType="NVarChar(MAX)")]
		public string Map_URL
		{
			get
			{
				return this._Map_URL;
			}
			set
			{
				if ((this._Map_URL != value))
				{
					this.OnMap_URLChanging(value);
					this.SendPropertyChanging();
					this._Map_URL = value;
					this.SendPropertyChanged("Map_URL");
					this.OnMap_URLChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="Area_Customers_Location", Storage="_Area", ThisKey="Area_ID", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Customers_Locations.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Customers_Locations.Add(this);
						this._Area_ID = value.ID;
					}
					else
					{
						this._Area_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[Association(Name="Customer_Customers_Location", Storage="_Customer", ThisKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Customers_Locations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Customers_Locations.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Department_Name;
		
		private System.Nullable<System.Guid> _Area_ID;
		
		private string _X_LOC;
		
		private string _Y_LOC;
		
		private string _Note;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Area> _Area;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDepartment_NameChanging(string value);
    partial void OnDepartment_NameChanged();
    partial void OnArea_IDChanging(System.Nullable<System.Guid> value);
    partial void OnArea_IDChanged();
    partial void OnX_LOCChanging(string value);
    partial void OnX_LOCChanged();
    partial void OnY_LOCChanging(string value);
    partial void OnY_LOCChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Department()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Area = default(EntityRef<Area>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Department_Name", DbType="NVarChar(MAX)")]
		public string Department_Name
		{
			get
			{
				return this._Department_Name;
			}
			set
			{
				if ((this._Department_Name != value))
				{
					this.OnDepartment_NameChanging(value);
					this.SendPropertyChanging();
					this._Department_Name = value;
					this.SendPropertyChanged("Department_Name");
					this.OnDepartment_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Area_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Area_ID
		{
			get
			{
				return this._Area_ID;
			}
			set
			{
				if ((this._Area_ID != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArea_IDChanging(value);
					this.SendPropertyChanging();
					this._Area_ID = value;
					this.SendPropertyChanged("Area_ID");
					this.OnArea_IDChanged();
				}
			}
		}
		
		[Column(Storage="_X_LOC", DbType="NVarChar(MAX)")]
		public string X_LOC
		{
			get
			{
				return this._X_LOC;
			}
			set
			{
				if ((this._X_LOC != value))
				{
					this.OnX_LOCChanging(value);
					this.SendPropertyChanging();
					this._X_LOC = value;
					this.SendPropertyChanged("X_LOC");
					this.OnX_LOCChanged();
				}
			}
		}
		
		[Column(Storage="_Y_LOC", DbType="NVarChar(MAX)")]
		public string Y_LOC
		{
			get
			{
				return this._Y_LOC;
			}
			set
			{
				if ((this._Y_LOC != value))
				{
					this.OnY_LOCChanging(value);
					this.SendPropertyChanging();
					this._Y_LOC = value;
					this.SendPropertyChanged("Y_LOC");
					this.OnY_LOCChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="Department_User", Storage="_Users", OtherKey="Department_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Area_Department", Storage="_Area", ThisKey="Area_ID", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._Area_ID = value.ID;
					}
					else
					{
						this._Area_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Discounts")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<int> _Discount_Percent;
		
		private System.Nullable<System.DateTime> _From_Date;
		
		private System.Nullable<System.DateTime> _To_Date;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_Discount_ID;
		
		private System.Nullable<System.Guid> _Customers_Group_ID;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnDiscount_PercentChanging(System.Nullable<int> value);
    partial void OnDiscount_PercentChanged();
    partial void OnFrom_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFrom_DateChanged();
    partial void OnTo_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnTo_DateChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_Discount_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_Discount_IDChanged();
    partial void OnCustomers_Group_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomers_Group_IDChanged();
    #endregion
		
		public Discount()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Discount_Percent", DbType="Int")]
		public System.Nullable<int> Discount_Percent
		{
			get
			{
				return this._Discount_Percent;
			}
			set
			{
				if ((this._Discount_Percent != value))
				{
					this.OnDiscount_PercentChanging(value);
					this.SendPropertyChanging();
					this._Discount_Percent = value;
					this.SendPropertyChanged("Discount_Percent");
					this.OnDiscount_PercentChanged();
				}
			}
		}
		
		[Column(Storage="_From_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> From_Date
		{
			get
			{
				return this._From_Date;
			}
			set
			{
				if ((this._From_Date != value))
				{
					this.OnFrom_DateChanging(value);
					this.SendPropertyChanging();
					this._From_Date = value;
					this.SendPropertyChanged("From_Date");
					this.OnFrom_DateChanged();
				}
			}
		}
		
		[Column(Storage="_To_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> To_Date
		{
			get
			{
				return this._To_Date;
			}
			set
			{
				if ((this._To_Date != value))
				{
					this.OnTo_DateChanging(value);
					this.SendPropertyChanging();
					this._To_Date = value;
					this.SendPropertyChanged("To_Date");
					this.OnTo_DateChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACTIVE", DbType="Bit")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_Discount_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_Discount_ID
		{
			get
			{
				return this._Unique_Discount_ID;
			}
			set
			{
				if ((this._Unique_Discount_ID != value))
				{
					this.OnUnique_Discount_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_Discount_ID = value;
					this.SendPropertyChanged("Unique_Discount_ID");
					this.OnUnique_Discount_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customers_Group_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customers_Group_ID
		{
			get
			{
				return this._Customers_Group_ID;
			}
			set
			{
				if ((this._Customers_Group_ID != value))
				{
					this.OnCustomers_Group_IDChanging(value);
					this.SendPropertyChanging();
					this._Customers_Group_ID = value;
					this.SendPropertyChanged("Customers_Group_ID");
					this.OnCustomers_Group_IDChanged();
				}
			}
		}
		
		[Association(Name="Item_Discount", Storage="_Item", ThisKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Discounts.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Discounts.Add(this);
						this._Item_ID = value.ID;
					}
					else
					{
						this._Item_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Item_Properties")]
	public partial class Item_Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Item_Property1;
		
		private EntitySet<Items_Property> _Items_Properties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItem_Property1Changing(string value);
    partial void OnItem_Property1Changed();
    #endregion
		
		public Item_Property()
		{
			this._Items_Properties = new EntitySet<Items_Property>(new Action<Items_Property>(this.attach_Items_Properties), new Action<Items_Property>(this.detach_Items_Properties));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="Item_Property", Storage="_Item_Property1", DbType="NVarChar(MAX)")]
		public string Item_Property1
		{
			get
			{
				return this._Item_Property1;
			}
			set
			{
				if ((this._Item_Property1 != value))
				{
					this.OnItem_Property1Changing(value);
					this.SendPropertyChanging();
					this._Item_Property1 = value;
					this.SendPropertyChanged("Item_Property1");
					this.OnItem_Property1Changed();
				}
			}
		}
		
		[Association(Name="Item_Property_Items_Property", Storage="_Items_Properties", OtherKey="Property_ID")]
		public EntitySet<Items_Property> Items_Properties
		{
			get
			{
				return this._Items_Properties;
			}
			set
			{
				this._Items_Properties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items_Properties(Items_Property entity)
		{
			this.SendPropertyChanging();
			entity.Item_Property = this;
		}
		
		private void detach_Items_Properties(Items_Property entity)
		{
			this.SendPropertyChanging();
			entity.Item_Property = null;
		}
	}
	
	[Table(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Provider_ID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<bool> _IS_AVAILABLE;
		
		private System.Nullable<bool> _IS_DELETED;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_Item_ID;
		
		private EntitySet<Discount> _Discounts;
		
		private EntitySet<Items_Property> _Items_Properties;
		
		private EntitySet<Items_Provider> _Items_Providers;
		
		private EntitySet<Promotion> _Promotions;
		
		private EntitySet<Salesman_Store> _Salesman_Stores;
		
		private EntitySet<Stores_Item> _Stores_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProvider_IDChanging(System.Nullable<System.Guid> value);
    partial void OnProvider_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnIS_AVAILABLEChanging(System.Nullable<bool> value);
    partial void OnIS_AVAILABLEChanged();
    partial void OnIS_DELETEDChanging(System.Nullable<bool> value);
    partial void OnIS_DELETEDChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_Item_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_Item_IDChanged();
    #endregion
		
		public Item()
		{
			this._Discounts = new EntitySet<Discount>(new Action<Discount>(this.attach_Discounts), new Action<Discount>(this.detach_Discounts));
			this._Items_Properties = new EntitySet<Items_Property>(new Action<Items_Property>(this.attach_Items_Properties), new Action<Items_Property>(this.detach_Items_Properties));
			this._Items_Providers = new EntitySet<Items_Provider>(new Action<Items_Provider>(this.attach_Items_Providers), new Action<Items_Provider>(this.detach_Items_Providers));
			this._Promotions = new EntitySet<Promotion>(new Action<Promotion>(this.attach_Promotions), new Action<Promotion>(this.detach_Promotions));
			this._Salesman_Stores = new EntitySet<Salesman_Store>(new Action<Salesman_Store>(this.attach_Salesman_Stores), new Action<Salesman_Store>(this.detach_Salesman_Stores));
			this._Stores_Items = new EntitySet<Stores_Item>(new Action<Stores_Item>(this.attach_Stores_Items), new Action<Stores_Item>(this.detach_Stores_Items));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Provider_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Provider_ID
		{
			get
			{
				return this._Provider_ID;
			}
			set
			{
				if ((this._Provider_ID != value))
				{
					this.OnProvider_IDChanging(value);
					this.SendPropertyChanging();
					this._Provider_ID = value;
					this.SendPropertyChanged("Provider_ID");
					this.OnProvider_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IS_AVAILABLE", DbType="Bit")]
		public System.Nullable<bool> IS_AVAILABLE
		{
			get
			{
				return this._IS_AVAILABLE;
			}
			set
			{
				if ((this._IS_AVAILABLE != value))
				{
					this.OnIS_AVAILABLEChanging(value);
					this.SendPropertyChanging();
					this._IS_AVAILABLE = value;
					this.SendPropertyChanged("IS_AVAILABLE");
					this.OnIS_AVAILABLEChanged();
				}
			}
		}
		
		[Column(Storage="_IS_DELETED", DbType="Bit")]
		public System.Nullable<bool> IS_DELETED
		{
			get
			{
				return this._IS_DELETED;
			}
			set
			{
				if ((this._IS_DELETED != value))
				{
					this.OnIS_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IS_DELETED = value;
					this.SendPropertyChanged("IS_DELETED");
					this.OnIS_DELETEDChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_Item_ID
		{
			get
			{
				return this._Unique_Item_ID;
			}
			set
			{
				if ((this._Unique_Item_ID != value))
				{
					this.OnUnique_Item_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_Item_ID = value;
					this.SendPropertyChanged("Unique_Item_ID");
					this.OnUnique_Item_IDChanged();
				}
			}
		}
		
		[Association(Name="Item_Discount", Storage="_Discounts", OtherKey="Item_ID")]
		public EntitySet<Discount> Discounts
		{
			get
			{
				return this._Discounts;
			}
			set
			{
				this._Discounts.Assign(value);
			}
		}
		
		[Association(Name="Item_Items_Property", Storage="_Items_Properties", OtherKey="Item_ID")]
		public EntitySet<Items_Property> Items_Properties
		{
			get
			{
				return this._Items_Properties;
			}
			set
			{
				this._Items_Properties.Assign(value);
			}
		}
		
		[Association(Name="Item_Items_Provider", Storage="_Items_Providers", OtherKey="Item_ID")]
		public EntitySet<Items_Provider> Items_Providers
		{
			get
			{
				return this._Items_Providers;
			}
			set
			{
				this._Items_Providers.Assign(value);
			}
		}
		
		[Association(Name="Item_Promotion", Storage="_Promotions", OtherKey="Item_ID")]
		public EntitySet<Promotion> Promotions
		{
			get
			{
				return this._Promotions;
			}
			set
			{
				this._Promotions.Assign(value);
			}
		}
		
		[Association(Name="Item_Salesman_Store", Storage="_Salesman_Stores", OtherKey="Item_ID")]
		public EntitySet<Salesman_Store> Salesman_Stores
		{
			get
			{
				return this._Salesman_Stores;
			}
			set
			{
				this._Salesman_Stores.Assign(value);
			}
		}
		
		[Association(Name="Item_Stores_Item", Storage="_Stores_Items", OtherKey="Item_ID")]
		public EntitySet<Stores_Item> Stores_Items
		{
			get
			{
				return this._Stores_Items;
			}
			set
			{
				this._Stores_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Discounts(Discount entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Discounts(Discount entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Items_Properties(Items_Property entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Items_Properties(Items_Property entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Items_Providers(Items_Provider entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Items_Providers(Items_Provider entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Promotions(Promotion entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Promotions(Promotion entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Salesman_Stores(Salesman_Store entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Salesman_Stores(Salesman_Store entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Stores_Items(Stores_Item entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Stores_Items(Stores_Item entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[Table(Name="dbo.Items_Properties")]
	public partial class Items_Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<System.Guid> _Property_ID;
		
		private EntityRef<Item_Property> _Item_Property;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnProperty_IDChanging(System.Nullable<System.Guid> value);
    partial void OnProperty_IDChanged();
    #endregion
		
		public Items_Property()
		{
			this._Item_Property = default(EntityRef<Item_Property>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Property_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Property_ID
		{
			get
			{
				return this._Property_ID;
			}
			set
			{
				if ((this._Property_ID != value))
				{
					if (this._Item_Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProperty_IDChanging(value);
					this.SendPropertyChanging();
					this._Property_ID = value;
					this.SendPropertyChanged("Property_ID");
					this.OnProperty_IDChanged();
				}
			}
		}
		
		[Association(Name="Item_Property_Items_Property", Storage="_Item_Property", ThisKey="Property_ID", IsForeignKey=true)]
		public Item_Property Item_Property
		{
			get
			{
				return this._Item_Property.Entity;
			}
			set
			{
				Item_Property previousValue = this._Item_Property.Entity;
				if (((previousValue != value) 
							|| (this._Item_Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item_Property.Entity = null;
						previousValue.Items_Properties.Remove(this);
					}
					this._Item_Property.Entity = value;
					if ((value != null))
					{
						value.Items_Properties.Add(this);
						this._Property_ID = value.ID;
					}
					else
					{
						this._Property_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item_Property");
				}
			}
		}
		
		[Association(Name="Item_Items_Property", Storage="_Item", ThisKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Items_Properties.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Items_Properties.Add(this);
						this._Item_ID = value.ID;
					}
					else
					{
						this._Item_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Items_Providers")]
	public partial class Items_Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<System.Guid> _Providers_ID;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Provider> _Provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnProviders_IDChanging(System.Nullable<System.Guid> value);
    partial void OnProviders_IDChanged();
    #endregion
		
		public Items_Provider()
		{
			this._Item = default(EntityRef<Item>);
			this._Provider = default(EntityRef<Provider>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Providers_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Providers_ID
		{
			get
			{
				return this._Providers_ID;
			}
			set
			{
				if ((this._Providers_ID != value))
				{
					if (this._Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviders_IDChanging(value);
					this.SendPropertyChanging();
					this._Providers_ID = value;
					this.SendPropertyChanged("Providers_ID");
					this.OnProviders_IDChanged();
				}
			}
		}
		
		[Association(Name="Item_Items_Provider", Storage="_Item", ThisKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Items_Providers.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Items_Providers.Add(this);
						this._Item_ID = value.ID;
					}
					else
					{
						this._Item_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[Association(Name="Provider_Items_Provider", Storage="_Provider", ThisKey="Providers_ID", IsForeignKey=true)]
		public Provider Provider
		{
			get
			{
				return this._Provider.Entity;
			}
			set
			{
				Provider previousValue = this._Provider.Entity;
				if (((previousValue != value) 
							|| (this._Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provider.Entity = null;
						previousValue.Items_Providers.Remove(this);
					}
					this._Provider.Entity = value;
					if ((value != null))
					{
						value.Items_Providers.Add(this);
						this._Providers_ID = value.ID;
					}
					else
					{
						this._Providers_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Max_Balance_Limitation")]
	public partial class Max_Balance_Limitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<decimal> _Max_Limit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnMax_LimitChanging(System.Nullable<decimal> value);
    partial void OnMax_LimitChanged();
    #endregion
		
		public Max_Balance_Limitation()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Max_Limit", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Max_Limit
		{
			get
			{
				return this._Max_Limit;
			}
			set
			{
				if ((this._Max_Limit != value))
				{
					this.OnMax_LimitChanging(value);
					this.SendPropertyChanging();
					this._Max_Limit = value;
					this.SendPropertyChanged("Max_Limit");
					this.OnMax_LimitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Navigation_Customers")]
	public partial class Navigation_Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Navigation_Route_ID;
		
		private System.Nullable<System.Guid> _Customer_ID;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Navigations_Route> _Navigations_Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNavigation_Route_IDChanging(System.Nullable<System.Guid> value);
    partial void OnNavigation_Route_IDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_IDChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    #endregion
		
		public Navigation_Customer()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Navigations_Route = default(EntityRef<Navigations_Route>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Navigation_Route_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Navigation_Route_ID
		{
			get
			{
				return this._Navigation_Route_ID;
			}
			set
			{
				if ((this._Navigation_Route_ID != value))
				{
					if (this._Navigations_Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNavigation_Route_IDChanging(value);
					this.SendPropertyChanging();
					this._Navigation_Route_ID = value;
					this.SendPropertyChanged("Navigation_Route_ID");
					this.OnNavigation_Route_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Association(Name="Customer_Navigation_Customer", Storage="_Customer", ThisKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Navigation_Customers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Navigation_Customers.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Navigations_Route_Navigation_Customer", Storage="_Navigations_Route", ThisKey="Navigation_Route_ID", IsForeignKey=true)]
		public Navigations_Route Navigations_Route
		{
			get
			{
				return this._Navigations_Route.Entity;
			}
			set
			{
				Navigations_Route previousValue = this._Navigations_Route.Entity;
				if (((previousValue != value) 
							|| (this._Navigations_Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Navigations_Route.Entity = null;
						previousValue.Navigation_Customers.Remove(this);
					}
					this._Navigations_Route.Entity = value;
					if ((value != null))
					{
						value.Navigation_Customers.Add(this);
						this._Navigation_Route_ID = value.ID;
					}
					else
					{
						this._Navigation_Route_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Navigations_Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Navigation_Types")]
	public partial class Navigation_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Navigation_Title;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private EntitySet<Navigations_Route> _Navigations_Routes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNavigation_TitleChanging(string value);
    partial void OnNavigation_TitleChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    #endregion
		
		public Navigation_Type()
		{
			this._Navigations_Routes = new EntitySet<Navigations_Route>(new Action<Navigations_Route>(this.attach_Navigations_Routes), new Action<Navigations_Route>(this.detach_Navigations_Routes));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Navigation_Title", DbType="NVarChar(MAX)")]
		public string Navigation_Title
		{
			get
			{
				return this._Navigation_Title;
			}
			set
			{
				if ((this._Navigation_Title != value))
				{
					this.OnNavigation_TitleChanging(value);
					this.SendPropertyChanging();
					this._Navigation_Title = value;
					this.SendPropertyChanged("Navigation_Title");
					this.OnNavigation_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Association(Name="Navigation_Type_Navigations_Route", Storage="_Navigations_Routes", OtherKey="Navigation_Type_ID")]
		public EntitySet<Navigations_Route> Navigations_Routes
		{
			get
			{
				return this._Navigations_Routes;
			}
			set
			{
				this._Navigations_Routes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Navigations_Routes(Navigations_Route entity)
		{
			this.SendPropertyChanging();
			entity.Navigation_Type = this;
		}
		
		private void detach_Navigations_Routes(Navigations_Route entity)
		{
			this.SendPropertyChanging();
			entity.Navigation_Type = null;
		}
	}
	
	[Table(Name="dbo.Navigations_Routes")]
	public partial class Navigations_Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.Guid> _Navigation_Type_ID;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private EntitySet<Navigation_Customer> _Navigation_Customers;
		
		private EntityRef<Navigation_Type> _Navigation_Type;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnNavigation_Type_IDChanging(System.Nullable<System.Guid> value);
    partial void OnNavigation_Type_IDChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    #endregion
		
		public Navigations_Route()
		{
			this._Navigation_Customers = new EntitySet<Navigation_Customer>(new Action<Navigation_Customer>(this.attach_Navigation_Customers), new Action<Navigation_Customer>(this.detach_Navigation_Customers));
			this._Navigation_Type = default(EntityRef<Navigation_Type>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Navigation_Type_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Navigation_Type_ID
		{
			get
			{
				return this._Navigation_Type_ID;
			}
			set
			{
				if ((this._Navigation_Type_ID != value))
				{
					if (this._Navigation_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNavigation_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Navigation_Type_ID = value;
					this.SendPropertyChanged("Navigation_Type_ID");
					this.OnNavigation_Type_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Association(Name="Navigations_Route_Navigation_Customer", Storage="_Navigation_Customers", OtherKey="Navigation_Route_ID")]
		public EntitySet<Navigation_Customer> Navigation_Customers
		{
			get
			{
				return this._Navigation_Customers;
			}
			set
			{
				this._Navigation_Customers.Assign(value);
			}
		}
		
		[Association(Name="Navigation_Type_Navigations_Route", Storage="_Navigation_Type", ThisKey="Navigation_Type_ID", IsForeignKey=true)]
		public Navigation_Type Navigation_Type
		{
			get
			{
				return this._Navigation_Type.Entity;
			}
			set
			{
				Navigation_Type previousValue = this._Navigation_Type.Entity;
				if (((previousValue != value) 
							|| (this._Navigation_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Navigation_Type.Entity = null;
						previousValue.Navigations_Routes.Remove(this);
					}
					this._Navigation_Type.Entity = value;
					if ((value != null))
					{
						value.Navigations_Routes.Add(this);
						this._Navigation_Type_ID = value.ID;
					}
					else
					{
						this._Navigation_Type_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Navigation_Type");
				}
			}
		}
		
		[Association(Name="User_Navigations_Route", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Navigations_Routes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Navigations_Routes.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Navigation_Customers(Navigation_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Navigations_Route = this;
		}
		
		private void detach_Navigation_Customers(Navigation_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Navigations_Route = null;
		}
	}
	
	[Table(Name="dbo.Payment_Currencies")]
	public partial class Payment_Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Payment_Currency1;
		
		private string _PayExtension;
		
		private string _FlagImg;
		
		private EntitySet<Payments_Detail> _Payments_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPayment_Currency1Changing(string value);
    partial void OnPayment_Currency1Changed();
    partial void OnPayExtensionChanging(string value);
    partial void OnPayExtensionChanged();
    partial void OnFlagImgChanging(string value);
    partial void OnFlagImgChanged();
    #endregion
		
		public Payment_Currency()
		{
			this._Payments_Details = new EntitySet<Payments_Detail>(new Action<Payments_Detail>(this.attach_Payments_Details), new Action<Payments_Detail>(this.detach_Payments_Details));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="Payment_Currency", Storage="_Payment_Currency1", DbType="NVarChar(MAX)")]
		public string Payment_Currency1
		{
			get
			{
				return this._Payment_Currency1;
			}
			set
			{
				if ((this._Payment_Currency1 != value))
				{
					this.OnPayment_Currency1Changing(value);
					this.SendPropertyChanging();
					this._Payment_Currency1 = value;
					this.SendPropertyChanged("Payment_Currency1");
					this.OnPayment_Currency1Changed();
				}
			}
		}
		
		[Column(Storage="_PayExtension", DbType="NVarChar(MAX)")]
		public string PayExtension
		{
			get
			{
				return this._PayExtension;
			}
			set
			{
				if ((this._PayExtension != value))
				{
					this.OnPayExtensionChanging(value);
					this.SendPropertyChanging();
					this._PayExtension = value;
					this.SendPropertyChanged("PayExtension");
					this.OnPayExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_FlagImg", DbType="NVarChar(MAX)")]
		public string FlagImg
		{
			get
			{
				return this._FlagImg;
			}
			set
			{
				if ((this._FlagImg != value))
				{
					this.OnFlagImgChanging(value);
					this.SendPropertyChanging();
					this._FlagImg = value;
					this.SendPropertyChanged("FlagImg");
					this.OnFlagImgChanged();
				}
			}
		}
		
		[Association(Name="Payment_Currency_Payments_Detail", Storage="_Payments_Details", OtherKey="Payment_Currency_ID")]
		public EntitySet<Payments_Detail> Payments_Details
		{
			get
			{
				return this._Payments_Details;
			}
			set
			{
				this._Payments_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments_Details(Payments_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Payment_Currency = this;
		}
		
		private void detach_Payments_Details(Payments_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Payment_Currency = null;
		}
	}
	
	[Table(Name="dbo.Payments_Details")]
	public partial class Payments_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Customer_ID;
		
		private System.Nullable<System.Guid> _Payment_type_ID;
		
		private System.Nullable<System.Guid> _Payment_Currency_ID;
		
		private System.Nullable<decimal> _Payment_Amount;
		
		private System.Nullable<System.DateTime> _Payment_Date;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private string _Note;
		
		private System.Nullable<bool> _IS_ACKNOWLEDGE;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Payment_Currency> _Payment_Currency;
		
		private EntityRef<Payments_Type> _Payments_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_IDChanged();
    partial void OnPayment_type_IDChanging(System.Nullable<System.Guid> value);
    partial void OnPayment_type_IDChanged();
    partial void OnPayment_Currency_IDChanging(System.Nullable<System.Guid> value);
    partial void OnPayment_Currency_IDChanged();
    partial void OnPayment_AmountChanging(System.Nullable<decimal> value);
    partial void OnPayment_AmountChanged();
    partial void OnPayment_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnPayment_DateChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnIS_ACKNOWLEDGEChanging(System.Nullable<bool> value);
    partial void OnIS_ACKNOWLEDGEChanged();
    #endregion
		
		public Payments_Detail()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Payment_Currency = default(EntityRef<Payment_Currency>);
			this._Payments_Type = default(EntityRef<Payments_Type>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Payment_type_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Payment_type_ID
		{
			get
			{
				return this._Payment_type_ID;
			}
			set
			{
				if ((this._Payment_type_ID != value))
				{
					if (this._Payments_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayment_type_IDChanging(value);
					this.SendPropertyChanging();
					this._Payment_type_ID = value;
					this.SendPropertyChanged("Payment_type_ID");
					this.OnPayment_type_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Payment_Currency_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Payment_Currency_ID
		{
			get
			{
				return this._Payment_Currency_ID;
			}
			set
			{
				if ((this._Payment_Currency_ID != value))
				{
					if (this._Payment_Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayment_Currency_IDChanging(value);
					this.SendPropertyChanging();
					this._Payment_Currency_ID = value;
					this.SendPropertyChanged("Payment_Currency_ID");
					this.OnPayment_Currency_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Payment_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Payment_Amount
		{
			get
			{
				return this._Payment_Amount;
			}
			set
			{
				if ((this._Payment_Amount != value))
				{
					this.OnPayment_AmountChanging(value);
					this.SendPropertyChanging();
					this._Payment_Amount = value;
					this.SendPropertyChanged("Payment_Amount");
					this.OnPayment_AmountChanged();
				}
			}
		}
		
		[Column(Storage="_Payment_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Payment_Date
		{
			get
			{
				return this._Payment_Date;
			}
			set
			{
				if ((this._Payment_Date != value))
				{
					this.OnPayment_DateChanging(value);
					this.SendPropertyChanging();
					this._Payment_Date = value;
					this.SendPropertyChanged("Payment_Date");
					this.OnPayment_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACKNOWLEDGE", DbType="Bit")]
		public System.Nullable<bool> IS_ACKNOWLEDGE
		{
			get
			{
				return this._IS_ACKNOWLEDGE;
			}
			set
			{
				if ((this._IS_ACKNOWLEDGE != value))
				{
					this.OnIS_ACKNOWLEDGEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACKNOWLEDGE = value;
					this.SendPropertyChanged("IS_ACKNOWLEDGE");
					this.OnIS_ACKNOWLEDGEChanged();
				}
			}
		}
		
		[Association(Name="Customer_Payments_Detail", Storage="_Customer", ThisKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Payments_Details.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Payments_Details.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Payment_Currency_Payments_Detail", Storage="_Payment_Currency", ThisKey="Payment_Currency_ID", IsForeignKey=true)]
		public Payment_Currency Payment_Currency
		{
			get
			{
				return this._Payment_Currency.Entity;
			}
			set
			{
				Payment_Currency previousValue = this._Payment_Currency.Entity;
				if (((previousValue != value) 
							|| (this._Payment_Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment_Currency.Entity = null;
						previousValue.Payments_Details.Remove(this);
					}
					this._Payment_Currency.Entity = value;
					if ((value != null))
					{
						value.Payments_Details.Add(this);
						this._Payment_Currency_ID = value.ID;
					}
					else
					{
						this._Payment_Currency_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Payment_Currency");
				}
			}
		}
		
		[Association(Name="Payments_Type_Payments_Detail", Storage="_Payments_Type", ThisKey="Payment_type_ID", IsForeignKey=true)]
		public Payments_Type Payments_Type
		{
			get
			{
				return this._Payments_Type.Entity;
			}
			set
			{
				Payments_Type previousValue = this._Payments_Type.Entity;
				if (((previousValue != value) 
							|| (this._Payments_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payments_Type.Entity = null;
						previousValue.Payments_Details.Remove(this);
					}
					this._Payments_Type.Entity = value;
					if ((value != null))
					{
						value.Payments_Details.Add(this);
						this._Payment_type_ID = value.ID;
					}
					else
					{
						this._Payment_type_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Payments_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Payments_Types")]
	public partial class Payments_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Payment_type;
		
		private string _Note;
		
		private EntitySet<Payments_Detail> _Payments_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPayment_typeChanging(string value);
    partial void OnPayment_typeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Payments_Type()
		{
			this._Payments_Details = new EntitySet<Payments_Detail>(new Action<Payments_Detail>(this.attach_Payments_Details), new Action<Payments_Detail>(this.detach_Payments_Details));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Payment_type", DbType="NVarChar(MAX)")]
		public string Payment_type
		{
			get
			{
				return this._Payment_type;
			}
			set
			{
				if ((this._Payment_type != value))
				{
					this.OnPayment_typeChanging(value);
					this.SendPropertyChanging();
					this._Payment_type = value;
					this.SendPropertyChanged("Payment_type");
					this.OnPayment_typeChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="Payments_Type_Payments_Detail", Storage="_Payments_Details", OtherKey="Payment_type_ID")]
		public EntitySet<Payments_Detail> Payments_Details
		{
			get
			{
				return this._Payments_Details;
			}
			set
			{
				this._Payments_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments_Details(Payments_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Payments_Type = this;
		}
		
		private void detach_Payments_Details(Payments_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Payments_Type = null;
		}
	}
	
	[Table(Name="dbo.Promotions")]
	public partial class Promotion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _Total_Price;
		
		private System.Nullable<System.DateTime> _From_Date;
		
		private System.Nullable<System.DateTime> _To_Date;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_Promotion_ID;
		
		private System.Nullable<System.Guid> _Customers_Group_ID;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnTotal_PriceChanging(System.Nullable<decimal> value);
    partial void OnTotal_PriceChanged();
    partial void OnFrom_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFrom_DateChanged();
    partial void OnTo_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnTo_DateChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_Promotion_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_Promotion_IDChanged();
    partial void OnCustomers_Group_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomers_Group_IDChanged();
    #endregion
		
		public Promotion()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Total_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Total_Price
		{
			get
			{
				return this._Total_Price;
			}
			set
			{
				if ((this._Total_Price != value))
				{
					this.OnTotal_PriceChanging(value);
					this.SendPropertyChanging();
					this._Total_Price = value;
					this.SendPropertyChanged("Total_Price");
					this.OnTotal_PriceChanged();
				}
			}
		}
		
		[Column(Storage="_From_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> From_Date
		{
			get
			{
				return this._From_Date;
			}
			set
			{
				if ((this._From_Date != value))
				{
					this.OnFrom_DateChanging(value);
					this.SendPropertyChanging();
					this._From_Date = value;
					this.SendPropertyChanged("From_Date");
					this.OnFrom_DateChanged();
				}
			}
		}
		
		[Column(Storage="_To_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> To_Date
		{
			get
			{
				return this._To_Date;
			}
			set
			{
				if ((this._To_Date != value))
				{
					this.OnTo_DateChanging(value);
					this.SendPropertyChanging();
					this._To_Date = value;
					this.SendPropertyChanged("To_Date");
					this.OnTo_DateChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACTIVE", DbType="Bit")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_Promotion_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_Promotion_ID
		{
			get
			{
				return this._Unique_Promotion_ID;
			}
			set
			{
				if ((this._Unique_Promotion_ID != value))
				{
					this.OnUnique_Promotion_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_Promotion_ID = value;
					this.SendPropertyChanged("Unique_Promotion_ID");
					this.OnUnique_Promotion_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customers_Group_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customers_Group_ID
		{
			get
			{
				return this._Customers_Group_ID;
			}
			set
			{
				if ((this._Customers_Group_ID != value))
				{
					this.OnCustomers_Group_IDChanging(value);
					this.SendPropertyChanging();
					this._Customers_Group_ID = value;
					this.SendPropertyChanged("Customers_Group_ID");
					this.OnCustomers_Group_IDChanged();
				}
			}
		}
		
		[Association(Name="Item_Promotion", Storage="_Item", ThisKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Promotions.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Promotions.Add(this);
						this._Item_ID = value.ID;
					}
					else
					{
						this._Item_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Providers")]
	public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Provider_Name;
		
		private string _Mobile;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Email;
		
		private string _Website;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private EntitySet<Items_Provider> _Items_Providers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProvider_NameChanging(string value);
    partial void OnProvider_NameChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    #endregion
		
		public Provider()
		{
			this._Items_Providers = new EntitySet<Items_Provider>(new Action<Items_Provider>(this.attach_Items_Providers), new Action<Items_Provider>(this.detach_Items_Providers));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Provider_Name", DbType="NVarChar(MAX)")]
		public string Provider_Name
		{
			get
			{
				return this._Provider_Name;
			}
			set
			{
				if ((this._Provider_Name != value))
				{
					this.OnProvider_NameChanging(value);
					this.SendPropertyChanging();
					this._Provider_Name = value;
					this.SendPropertyChanged("Provider_Name");
					this.OnProvider_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Mobile", DbType="NVarChar(MAX)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Website", DbType="NVarChar(MAX)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Association(Name="Provider_Items_Provider", Storage="_Items_Providers", OtherKey="Providers_ID")]
		public EntitySet<Items_Provider> Items_Providers
		{
			get
			{
				return this._Items_Providers;
			}
			set
			{
				this._Items_Providers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items_Providers(Items_Provider entity)
		{
			this.SendPropertyChanging();
			entity.Provider = this;
		}
		
		private void detach_Items_Providers(Items_Provider entity)
		{
			this.SendPropertyChanging();
			entity.Provider = null;
		}
	}
	
	[Table(Name="dbo.Salesman_Store")]
	public partial class Salesman_Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.DateTime> _Delivery_Date;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private string _User_Vehicle_Number;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnDelivery_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnDelivery_DateChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUser_Vehicle_NumberChanging(string value);
    partial void OnUser_Vehicle_NumberChanged();
    #endregion
		
		public Salesman_Store()
		{
			this._Item = default(EntityRef<Item>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Delivery_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Delivery_Date
		{
			get
			{
				return this._Delivery_Date;
			}
			set
			{
				if ((this._Delivery_Date != value))
				{
					this.OnDelivery_DateChanging(value);
					this.SendPropertyChanging();
					this._Delivery_Date = value;
					this.SendPropertyChanged("Delivery_Date");
					this.OnDelivery_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_User_Vehicle_Number", DbType="NVarChar(MAX)")]
		public string User_Vehicle_Number
		{
			get
			{
				return this._User_Vehicle_Number;
			}
			set
			{
				if ((this._User_Vehicle_Number != value))
				{
					this.OnUser_Vehicle_NumberChanging(value);
					this.SendPropertyChanging();
					this._User_Vehicle_Number = value;
					this.SendPropertyChanged("User_Vehicle_Number");
					this.OnUser_Vehicle_NumberChanged();
				}
			}
		}
		
		[Association(Name="Item_Salesman_Store", Storage="_Item", ThisKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Salesman_Stores.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Salesman_Stores.Add(this);
						this._Item_ID = value.ID;
					}
					else
					{
						this._Item_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[Association(Name="User_Salesman_Store", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Salesman_Stores.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Salesman_Stores.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Salesman_Visits")]
	public partial class Salesman_Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.Guid> _Customer_ID;
		
		private System.Nullable<System.DateTime> _Visit_Date;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_Visit_ID;
		
		private System.Nullable<bool> _IS_ACKNOWLEDGE;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomer_IDChanged();
    partial void OnVisit_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnVisit_DateChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_Visit_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_Visit_IDChanged();
    partial void OnIS_ACKNOWLEDGEChanging(System.Nullable<bool> value);
    partial void OnIS_ACKNOWLEDGEChanged();
    #endregion
		
		public Salesman_Visit()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Visit_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Visit_Date
		{
			get
			{
				return this._Visit_Date;
			}
			set
			{
				if ((this._Visit_Date != value))
				{
					this.OnVisit_DateChanging(value);
					this.SendPropertyChanging();
					this._Visit_Date = value;
					this.SendPropertyChanged("Visit_Date");
					this.OnVisit_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_Visit_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_Visit_ID
		{
			get
			{
				return this._Unique_Visit_ID;
			}
			set
			{
				if ((this._Unique_Visit_ID != value))
				{
					this.OnUnique_Visit_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_Visit_ID = value;
					this.SendPropertyChanged("Unique_Visit_ID");
					this.OnUnique_Visit_IDChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACKNOWLEDGE", DbType="Bit")]
		public System.Nullable<bool> IS_ACKNOWLEDGE
		{
			get
			{
				return this._IS_ACKNOWLEDGE;
			}
			set
			{
				if ((this._IS_ACKNOWLEDGE != value))
				{
					this.OnIS_ACKNOWLEDGEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACKNOWLEDGE = value;
					this.SendPropertyChanged("IS_ACKNOWLEDGE");
					this.OnIS_ACKNOWLEDGEChanged();
				}
			}
		}
		
		[Association(Name="User_Salesman_Visit", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Salesman_Visits.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Salesman_Visits.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Stores")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Store_Name;
		
		private string _Notes;
		
		private EntitySet<Stores_Item> _Stores_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnStore_NameChanging(string value);
    partial void OnStore_NameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Store()
		{
			this._Stores_Items = new EntitySet<Stores_Item>(new Action<Stores_Item>(this.attach_Stores_Items), new Action<Stores_Item>(this.detach_Stores_Items));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Store_Name", DbType="NVarChar(MAX)")]
		public string Store_Name
		{
			get
			{
				return this._Store_Name;
			}
			set
			{
				if ((this._Store_Name != value))
				{
					this.OnStore_NameChanging(value);
					this.SendPropertyChanging();
					this._Store_Name = value;
					this.SendPropertyChanged("Store_Name");
					this.OnStore_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Store_Stores_Item", Storage="_Stores_Items", OtherKey="Store_ID")]
		public EntitySet<Stores_Item> Stores_Items
		{
			get
			{
				return this._Stores_Items;
			}
			set
			{
				this._Stores_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stores_Items(Stores_Item entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_Stores_Items(Stores_Item entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
	}
	
	[Table(Name="dbo.Stores_Items")]
	public partial class Stores_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Store_ID;
		
		private System.Nullable<System.Guid> _Category_ID;
		
		private System.Nullable<System.Guid> _Item_ID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnStore_IDChanging(System.Nullable<System.Guid> value);
    partial void OnStore_IDChanged();
    partial void OnCategory_IDChanging(System.Nullable<System.Guid> value);
    partial void OnCategory_IDChanged();
    partial void OnItem_IDChanging(System.Nullable<System.Guid> value);
    partial void OnItem_IDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    #endregion
		
		public Stores_Item()
		{
			this._Category = default(EntityRef<Category>);
			this._Item = default(EntityRef<Item>);
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Store_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Store_ID
		{
			get
			{
				return this._Store_ID;
			}
			set
			{
				if ((this._Store_ID != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStore_IDChanging(value);
					this.SendPropertyChanging();
					this._Store_ID = value;
					this.SendPropertyChanged("Store_ID");
					this.OnStore_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Category_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Item_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Association(Name="Category_Stores_Item", Storage="_Category", ThisKey="Category_ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Stores_Items.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Stores_Items.Add(this);
						this._Category_ID = value.ID;
					}
					else
					{
						this._Category_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Item_Stores_Item", Storage="_Item", ThisKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Stores_Items.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Stores_Items.Add(this);
						this._Item_ID = value.ID;
					}
					else
					{
						this._Item_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[Association(Name="Store_Stores_Item", Storage="_Store", ThisKey="Store_ID", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.Stores_Items.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.Stores_Items.Add(this);
						this._Store_ID = value.ID;
					}
					else
					{
						this._Store_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Suggested_Clients")]
	public partial class Suggested_Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Customer_Title;
		
		private string _Fullname;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Mobile;
		
		private System.Nullable<System.DateTime> _Date_Added;
		
		private System.Nullable<System.Guid> _LOCATION_ID;
		
		private System.Nullable<System.Guid> _Related_User_ID;
		
		private System.Nullable<bool> _Send_Balance_Newsletter;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<bool> _IS_ACKNOWLEDGE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomer_TitleChanging(string value);
    partial void OnCustomer_TitleChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnDate_AddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_AddedChanged();
    partial void OnLOCATION_IDChanging(System.Nullable<System.Guid> value);
    partial void OnLOCATION_IDChanged();
    partial void OnRelated_User_IDChanging(System.Nullable<System.Guid> value);
    partial void OnRelated_User_IDChanged();
    partial void OnSend_Balance_NewsletterChanging(System.Nullable<bool> value);
    partial void OnSend_Balance_NewsletterChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnIS_ACKNOWLEDGEChanging(System.Nullable<bool> value);
    partial void OnIS_ACKNOWLEDGEChanged();
    #endregion
		
		public Suggested_Client()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Customer_Title", DbType="NVarChar(MAX)")]
		public string Customer_Title
		{
			get
			{
				return this._Customer_Title;
			}
			set
			{
				if ((this._Customer_Title != value))
				{
					this.OnCustomer_TitleChanging(value);
					this.SendPropertyChanging();
					this._Customer_Title = value;
					this.SendPropertyChanged("Customer_Title");
					this.OnCustomer_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Fullname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Mobile", DbType="NVarChar(MAX)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[Column(Storage="_Date_Added", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_Added
		{
			get
			{
				return this._Date_Added;
			}
			set
			{
				if ((this._Date_Added != value))
				{
					this.OnDate_AddedChanging(value);
					this.SendPropertyChanging();
					this._Date_Added = value;
					this.SendPropertyChanged("Date_Added");
					this.OnDate_AddedChanged();
				}
			}
		}
		
		[Column(Storage="_LOCATION_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LOCATION_ID
		{
			get
			{
				return this._LOCATION_ID;
			}
			set
			{
				if ((this._LOCATION_ID != value))
				{
					this.OnLOCATION_IDChanging(value);
					this.SendPropertyChanging();
					this._LOCATION_ID = value;
					this.SendPropertyChanged("LOCATION_ID");
					this.OnLOCATION_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Related_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Related_User_ID
		{
			get
			{
				return this._Related_User_ID;
			}
			set
			{
				if ((this._Related_User_ID != value))
				{
					this.OnRelated_User_IDChanging(value);
					this.SendPropertyChanging();
					this._Related_User_ID = value;
					this.SendPropertyChanged("Related_User_ID");
					this.OnRelated_User_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Send_Balance_Newsletter", DbType="Bit")]
		public System.Nullable<bool> Send_Balance_Newsletter
		{
			get
			{
				return this._Send_Balance_Newsletter;
			}
			set
			{
				if ((this._Send_Balance_Newsletter != value))
				{
					this.OnSend_Balance_NewsletterChanging(value);
					this.SendPropertyChanging();
					this._Send_Balance_Newsletter = value;
					this.SendPropertyChanged("Send_Balance_Newsletter");
					this.OnSend_Balance_NewsletterChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACKNOWLEDGE", DbType="Bit")]
		public System.Nullable<bool> IS_ACKNOWLEDGE
		{
			get
			{
				return this._IS_ACKNOWLEDGE;
			}
			set
			{
				if ((this._IS_ACKNOWLEDGE != value))
				{
					this.OnIS_ACKNOWLEDGEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACKNOWLEDGE = value;
					this.SendPropertyChanged("IS_ACKNOWLEDGE");
					this.OnIS_ACKNOWLEDGEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _User_Type_ID;
		
		private System.Guid _Department_ID;
		
		private string _User_Title;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Position;
		
		private string _Organization;
		
		private System.Nullable<System.DateTime> _Join_Date;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<System.Guid> _Unique_User_ID;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private EntitySet<Action_Log> _Action_Logs;
		
		private EntitySet<Customers_Bill> _Customers_Bills;
		
		private EntitySet<Navigations_Route> _Navigations_Routes;
		
		private EntitySet<Salesman_Store> _Salesman_Stores;
		
		private EntitySet<Salesman_Visit> _Salesman_Visits;
		
		private EntitySet<Users_Car> _Users_Cars;
		
		private EntitySet<Users_Days_Off> _Users_Days_Offs;
		
		private EntitySet<Users_Payment> _Users_Payments;
		
		private EntitySet<Users_Permission> _Users_Permissions;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Users_Type> _Users_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_Type_IDChanging(System.Guid value);
    partial void OnUser_Type_IDChanged();
    partial void OnDepartment_IDChanging(System.Guid value);
    partial void OnDepartment_IDChanged();
    partial void OnUser_TitleChanging(string value);
    partial void OnUser_TitleChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnJoin_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnJoin_DateChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnUnique_User_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUnique_User_IDChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    #endregion
		
		public User()
		{
			this._Action_Logs = new EntitySet<Action_Log>(new Action<Action_Log>(this.attach_Action_Logs), new Action<Action_Log>(this.detach_Action_Logs));
			this._Customers_Bills = new EntitySet<Customers_Bill>(new Action<Customers_Bill>(this.attach_Customers_Bills), new Action<Customers_Bill>(this.detach_Customers_Bills));
			this._Navigations_Routes = new EntitySet<Navigations_Route>(new Action<Navigations_Route>(this.attach_Navigations_Routes), new Action<Navigations_Route>(this.detach_Navigations_Routes));
			this._Salesman_Stores = new EntitySet<Salesman_Store>(new Action<Salesman_Store>(this.attach_Salesman_Stores), new Action<Salesman_Store>(this.detach_Salesman_Stores));
			this._Salesman_Visits = new EntitySet<Salesman_Visit>(new Action<Salesman_Visit>(this.attach_Salesman_Visits), new Action<Salesman_Visit>(this.detach_Salesman_Visits));
			this._Users_Cars = new EntitySet<Users_Car>(new Action<Users_Car>(this.attach_Users_Cars), new Action<Users_Car>(this.detach_Users_Cars));
			this._Users_Days_Offs = new EntitySet<Users_Days_Off>(new Action<Users_Days_Off>(this.attach_Users_Days_Offs), new Action<Users_Days_Off>(this.detach_Users_Days_Offs));
			this._Users_Payments = new EntitySet<Users_Payment>(new Action<Users_Payment>(this.attach_Users_Payments), new Action<Users_Payment>(this.detach_Users_Payments));
			this._Users_Permissions = new EntitySet<Users_Permission>(new Action<Users_Permission>(this.attach_Users_Permissions), new Action<Users_Permission>(this.detach_Users_Permissions));
			this._Department = default(EntityRef<Department>);
			this._Users_Type = default(EntityRef<Users_Type>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_Type_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User_Type_ID
		{
			get
			{
				return this._User_Type_ID;
			}
			set
			{
				if ((this._User_Type_ID != value))
				{
					if (this._Users_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._User_Type_ID = value;
					this.SendPropertyChanged("User_Type_ID");
					this.OnUser_Type_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Department_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Department_ID
		{
			get
			{
				return this._Department_ID;
			}
			set
			{
				if ((this._Department_ID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartment_IDChanging(value);
					this.SendPropertyChanging();
					this._Department_ID = value;
					this.SendPropertyChanged("Department_ID");
					this.OnDepartment_IDChanged();
				}
			}
		}
		
		[Column(Storage="_User_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string User_Title
		{
			get
			{
				return this._User_Title;
			}
			set
			{
				if ((this._User_Title != value))
				{
					this.OnUser_TitleChanging(value);
					this.SendPropertyChanging();
					this._User_Title = value;
					this.SendPropertyChanged("User_Title");
					this.OnUser_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="NVarChar(MAX)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Organization", DbType="NVarChar(MAX)")]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[Column(Storage="_Join_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Join_Date
		{
			get
			{
				return this._Join_Date;
			}
			set
			{
				if ((this._Join_Date != value))
				{
					this.OnJoin_DateChanging(value);
					this.SendPropertyChanging();
					this._Join_Date = value;
					this.SendPropertyChanged("Join_Date");
					this.OnJoin_DateChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="NVarChar(MAX)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="NVarChar(MAX)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Unique_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Unique_User_ID
		{
			get
			{
				return this._Unique_User_ID;
			}
			set
			{
				if ((this._Unique_User_ID != value))
				{
					this.OnUnique_User_IDChanging(value);
					this.SendPropertyChanging();
					this._Unique_User_ID = value;
					this.SendPropertyChanged("Unique_User_ID");
					this.OnUnique_User_IDChanged();
				}
			}
		}
		
		[Column(Storage="_IS_ACTIVE", DbType="Bit")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[Association(Name="User_Action_Log", Storage="_Action_Logs", OtherKey="User_ID")]
		public EntitySet<Action_Log> Action_Logs
		{
			get
			{
				return this._Action_Logs;
			}
			set
			{
				this._Action_Logs.Assign(value);
			}
		}
		
		[Association(Name="User_Customers_Bill", Storage="_Customers_Bills", OtherKey="User_ID")]
		public EntitySet<Customers_Bill> Customers_Bills
		{
			get
			{
				return this._Customers_Bills;
			}
			set
			{
				this._Customers_Bills.Assign(value);
			}
		}
		
		[Association(Name="User_Navigations_Route", Storage="_Navigations_Routes", OtherKey="User_ID")]
		public EntitySet<Navigations_Route> Navigations_Routes
		{
			get
			{
				return this._Navigations_Routes;
			}
			set
			{
				this._Navigations_Routes.Assign(value);
			}
		}
		
		[Association(Name="User_Salesman_Store", Storage="_Salesman_Stores", OtherKey="User_ID")]
		public EntitySet<Salesman_Store> Salesman_Stores
		{
			get
			{
				return this._Salesman_Stores;
			}
			set
			{
				this._Salesman_Stores.Assign(value);
			}
		}
		
		[Association(Name="User_Salesman_Visit", Storage="_Salesman_Visits", OtherKey="User_ID")]
		public EntitySet<Salesman_Visit> Salesman_Visits
		{
			get
			{
				return this._Salesman_Visits;
			}
			set
			{
				this._Salesman_Visits.Assign(value);
			}
		}
		
		[Association(Name="User_Users_Car", Storage="_Users_Cars", OtherKey="User_ID")]
		public EntitySet<Users_Car> Users_Cars
		{
			get
			{
				return this._Users_Cars;
			}
			set
			{
				this._Users_Cars.Assign(value);
			}
		}
		
		[Association(Name="User_Users_Days_Off", Storage="_Users_Days_Offs", OtherKey="User_ID")]
		public EntitySet<Users_Days_Off> Users_Days_Offs
		{
			get
			{
				return this._Users_Days_Offs;
			}
			set
			{
				this._Users_Days_Offs.Assign(value);
			}
		}
		
		[Association(Name="User_Users_Payment", Storage="_Users_Payments", OtherKey="User_ID")]
		public EntitySet<Users_Payment> Users_Payments
		{
			get
			{
				return this._Users_Payments;
			}
			set
			{
				this._Users_Payments.Assign(value);
			}
		}
		
		[Association(Name="User_Users_Permission", Storage="_Users_Permissions", OtherKey="User_ID")]
		public EntitySet<Users_Permission> Users_Permissions
		{
			get
			{
				return this._Users_Permissions;
			}
			set
			{
				this._Users_Permissions.Assign(value);
			}
		}
		
		[Association(Name="Department_User", Storage="_Department", ThisKey="Department_ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Department_ID = value.ID;
					}
					else
					{
						this._Department_ID = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="Users_Type_User", Storage="_Users_Type", ThisKey="User_Type_ID", IsForeignKey=true)]
		public Users_Type Users_Type
		{
			get
			{
				return this._Users_Type.Entity;
			}
			set
			{
				Users_Type previousValue = this._Users_Type.Entity;
				if (((previousValue != value) 
							|| (this._Users_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users_Type.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Users_Type.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._User_Type_ID = value.ID;
					}
					else
					{
						this._User_Type_ID = default(System.Guid);
					}
					this.SendPropertyChanged("Users_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Action_Logs(Action_Log entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Action_Logs(Action_Log entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Customers_Bills(Customers_Bill entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Customers_Bills(Customers_Bill entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Navigations_Routes(Navigations_Route entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Navigations_Routes(Navigations_Route entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Salesman_Stores(Salesman_Store entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Salesman_Stores(Salesman_Store entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Salesman_Visits(Salesman_Visit entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Salesman_Visits(Salesman_Visit entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users_Cars(Users_Car entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Users_Cars(Users_Car entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users_Days_Offs(Users_Days_Off entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Users_Days_Offs(Users_Days_Off entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users_Payments(Users_Payment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Users_Payments(Users_Payment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users_Permissions(Users_Permission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Users_Permissions(Users_Permission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.Users_Cars")]
	public partial class Users_Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.DateTime> _Delivery_Date;
		
		private string _Car_Vehicle_Number;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnDelivery_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnDelivery_DateChanged();
    partial void OnCar_Vehicle_NumberChanging(string value);
    partial void OnCar_Vehicle_NumberChanged();
    #endregion
		
		public Users_Car()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Delivery_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Delivery_Date
		{
			get
			{
				return this._Delivery_Date;
			}
			set
			{
				if ((this._Delivery_Date != value))
				{
					this.OnDelivery_DateChanging(value);
					this.SendPropertyChanging();
					this._Delivery_Date = value;
					this.SendPropertyChanged("Delivery_Date");
					this.OnDelivery_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Car_Vehicle_Number", DbType="NVarChar(MAX)")]
		public string Car_Vehicle_Number
		{
			get
			{
				return this._Car_Vehicle_Number;
			}
			set
			{
				if ((this._Car_Vehicle_Number != value))
				{
					this.OnCar_Vehicle_NumberChanging(value);
					this.SendPropertyChanging();
					this._Car_Vehicle_Number = value;
					this.SendPropertyChanged("Car_Vehicle_Number");
					this.OnCar_Vehicle_NumberChanged();
				}
			}
		}
		
		[Association(Name="User_Users_Car", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Users_Cars.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Users_Cars.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users_Days_Off")]
	public partial class Users_Days_Off : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<System.DateTime> _From_Date;
		
		private System.Nullable<System.DateTime> _To_Date;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnFrom_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFrom_DateChanged();
    partial void OnTo_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnTo_DateChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    #endregion
		
		public Users_Days_Off()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_From_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> From_Date
		{
			get
			{
				return this._From_Date;
			}
			set
			{
				if ((this._From_Date != value))
				{
					this.OnFrom_DateChanging(value);
					this.SendPropertyChanging();
					this._From_Date = value;
					this.SendPropertyChanged("From_Date");
					this.OnFrom_DateChanged();
				}
			}
		}
		
		[Column(Storage="_To_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> To_Date
		{
			get
			{
				return this._To_Date;
			}
			set
			{
				if ((this._To_Date != value))
				{
					this.OnTo_DateChanging(value);
					this.SendPropertyChanging();
					this._To_Date = value;
					this.SendPropertyChanged("To_Date");
					this.OnTo_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Association(Name="User_Users_Days_Off", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Users_Days_Offs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Users_Days_Offs.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users_Payments")]
	public partial class Users_Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _From_Date;
		
		private System.Nullable<System.DateTime> _To_Date;
		
		private System.Nullable<System.DateTime> _Entry_Date;
		
		private System.Nullable<bool> _IS_Award;
		
		private System.Nullable<bool> _IS_Salary;
		
		private System.Nullable<bool> _IS_Discount;
		
		private System.Nullable<bool> _IS_Expense;
		
		private string _Notes;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnFrom_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFrom_DateChanged();
    partial void OnTo_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnTo_DateChanged();
    partial void OnEntry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntry_DateChanged();
    partial void OnIS_AwardChanging(System.Nullable<bool> value);
    partial void OnIS_AwardChanged();
    partial void OnIS_SalaryChanging(System.Nullable<bool> value);
    partial void OnIS_SalaryChanged();
    partial void OnIS_DiscountChanging(System.Nullable<bool> value);
    partial void OnIS_DiscountChanged();
    partial void OnIS_ExpenseChanging(System.Nullable<bool> value);
    partial void OnIS_ExpenseChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Users_Payment()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_From_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> From_Date
		{
			get
			{
				return this._From_Date;
			}
			set
			{
				if ((this._From_Date != value))
				{
					this.OnFrom_DateChanging(value);
					this.SendPropertyChanging();
					this._From_Date = value;
					this.SendPropertyChanged("From_Date");
					this.OnFrom_DateChanged();
				}
			}
		}
		
		[Column(Storage="_To_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> To_Date
		{
			get
			{
				return this._To_Date;
			}
			set
			{
				if ((this._To_Date != value))
				{
					this.OnTo_DateChanging(value);
					this.SendPropertyChanging();
					this._To_Date = value;
					this.SendPropertyChanged("To_Date");
					this.OnTo_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Entry_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Entry_Date
		{
			get
			{
				return this._Entry_Date;
			}
			set
			{
				if ((this._Entry_Date != value))
				{
					this.OnEntry_DateChanging(value);
					this.SendPropertyChanging();
					this._Entry_Date = value;
					this.SendPropertyChanged("Entry_Date");
					this.OnEntry_DateChanged();
				}
			}
		}
		
		[Column(Storage="_IS_Award", DbType="Bit")]
		public System.Nullable<bool> IS_Award
		{
			get
			{
				return this._IS_Award;
			}
			set
			{
				if ((this._IS_Award != value))
				{
					this.OnIS_AwardChanging(value);
					this.SendPropertyChanging();
					this._IS_Award = value;
					this.SendPropertyChanged("IS_Award");
					this.OnIS_AwardChanged();
				}
			}
		}
		
		[Column(Storage="_IS_Salary", DbType="Bit")]
		public System.Nullable<bool> IS_Salary
		{
			get
			{
				return this._IS_Salary;
			}
			set
			{
				if ((this._IS_Salary != value))
				{
					this.OnIS_SalaryChanging(value);
					this.SendPropertyChanging();
					this._IS_Salary = value;
					this.SendPropertyChanged("IS_Salary");
					this.OnIS_SalaryChanged();
				}
			}
		}
		
		[Column(Storage="_IS_Discount", DbType="Bit")]
		public System.Nullable<bool> IS_Discount
		{
			get
			{
				return this._IS_Discount;
			}
			set
			{
				if ((this._IS_Discount != value))
				{
					this.OnIS_DiscountChanging(value);
					this.SendPropertyChanging();
					this._IS_Discount = value;
					this.SendPropertyChanged("IS_Discount");
					this.OnIS_DiscountChanged();
				}
			}
		}
		
		[Column(Storage="_IS_Expense", DbType="Bit")]
		public System.Nullable<bool> IS_Expense
		{
			get
			{
				return this._IS_Expense;
			}
			set
			{
				if ((this._IS_Expense != value))
				{
					this.OnIS_ExpenseChanging(value);
					this.SendPropertyChanging();
					this._IS_Expense = value;
					this.SendPropertyChanged("IS_Expense");
					this.OnIS_ExpenseChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="User_Users_Payment", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Users_Payments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Users_Payments.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users_Permissions")]
	public partial class Users_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Section_ID;
		
		private System.Nullable<System.Guid> _User_ID;
		
		private System.Nullable<bool> _CAN_VIEW;
		
		private System.Nullable<bool> _CAN_ADD;
		
		private System.Nullable<bool> _CAN_EDIT;
		
		private System.Nullable<bool> _CAN_DELETE;
		
		private EntityRef<Control_Section> _Control_Section;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSection_IDChanging(System.Nullable<System.Guid> value);
    partial void OnSection_IDChanged();
    partial void OnUser_IDChanging(System.Nullable<System.Guid> value);
    partial void OnUser_IDChanged();
    partial void OnCAN_VIEWChanging(System.Nullable<bool> value);
    partial void OnCAN_VIEWChanged();
    partial void OnCAN_ADDChanging(System.Nullable<bool> value);
    partial void OnCAN_ADDChanged();
    partial void OnCAN_EDITChanging(System.Nullable<bool> value);
    partial void OnCAN_EDITChanged();
    partial void OnCAN_DELETEChanging(System.Nullable<bool> value);
    partial void OnCAN_DELETEChanged();
    #endregion
		
		public Users_Permission()
		{
			this._Control_Section = default(EntityRef<Control_Section>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Section_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Section_ID
		{
			get
			{
				return this._Section_ID;
			}
			set
			{
				if ((this._Section_ID != value))
				{
					if (this._Control_Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSection_IDChanging(value);
					this.SendPropertyChanging();
					this._Section_ID = value;
					this.SendPropertyChanged("Section_ID");
					this.OnSection_IDChanged();
				}
			}
		}
		
		[Column(Storage="_User_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[Column(Storage="_CAN_VIEW", DbType="Bit")]
		public System.Nullable<bool> CAN_VIEW
		{
			get
			{
				return this._CAN_VIEW;
			}
			set
			{
				if ((this._CAN_VIEW != value))
				{
					this.OnCAN_VIEWChanging(value);
					this.SendPropertyChanging();
					this._CAN_VIEW = value;
					this.SendPropertyChanged("CAN_VIEW");
					this.OnCAN_VIEWChanged();
				}
			}
		}
		
		[Column(Storage="_CAN_ADD", DbType="Bit")]
		public System.Nullable<bool> CAN_ADD
		{
			get
			{
				return this._CAN_ADD;
			}
			set
			{
				if ((this._CAN_ADD != value))
				{
					this.OnCAN_ADDChanging(value);
					this.SendPropertyChanging();
					this._CAN_ADD = value;
					this.SendPropertyChanged("CAN_ADD");
					this.OnCAN_ADDChanged();
				}
			}
		}
		
		[Column(Storage="_CAN_EDIT", DbType="Bit")]
		public System.Nullable<bool> CAN_EDIT
		{
			get
			{
				return this._CAN_EDIT;
			}
			set
			{
				if ((this._CAN_EDIT != value))
				{
					this.OnCAN_EDITChanging(value);
					this.SendPropertyChanging();
					this._CAN_EDIT = value;
					this.SendPropertyChanged("CAN_EDIT");
					this.OnCAN_EDITChanged();
				}
			}
		}
		
		[Column(Storage="_CAN_DELETE", DbType="Bit")]
		public System.Nullable<bool> CAN_DELETE
		{
			get
			{
				return this._CAN_DELETE;
			}
			set
			{
				if ((this._CAN_DELETE != value))
				{
					this.OnCAN_DELETEChanging(value);
					this.SendPropertyChanging();
					this._CAN_DELETE = value;
					this.SendPropertyChanged("CAN_DELETE");
					this.OnCAN_DELETEChanged();
				}
			}
		}
		
		[Association(Name="Control_Section_Users_Permission", Storage="_Control_Section", ThisKey="Section_ID", IsForeignKey=true)]
		public Control_Section Control_Section
		{
			get
			{
				return this._Control_Section.Entity;
			}
			set
			{
				Control_Section previousValue = this._Control_Section.Entity;
				if (((previousValue != value) 
							|| (this._Control_Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Control_Section.Entity = null;
						previousValue.Users_Permissions.Remove(this);
					}
					this._Control_Section.Entity = value;
					if ((value != null))
					{
						value.Users_Permissions.Add(this);
						this._Section_ID = value.ID;
					}
					else
					{
						this._Section_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Control_Section");
				}
			}
		}
		
		[Association(Name="User_Users_Permission", Storage="_User", ThisKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Users_Permissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Users_Permissions.Add(this);
						this._User_ID = value.ID;
					}
					else
					{
						this._User_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
